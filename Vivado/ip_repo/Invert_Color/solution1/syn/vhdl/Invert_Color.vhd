-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Invert_Color is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    in_data_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
    in_data_TVALID : IN STD_LOGIC;
    in_data_TREADY : OUT STD_LOGIC;
    in_data_TKEEP : IN STD_LOGIC_VECTOR (2 downto 0);
    in_data_TSTRB : IN STD_LOGIC_VECTOR (2 downto 0);
    in_data_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    in_data_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    out_data_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
    out_data_TVALID : OUT STD_LOGIC;
    out_data_TREADY : IN STD_LOGIC;
    out_data_TKEEP : OUT STD_LOGIC_VECTOR (2 downto 0);
    out_data_TSTRB : OUT STD_LOGIC_VECTOR (2 downto 0);
    out_data_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_data_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of Invert_Color is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "Invert_Color_Invert_Color,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.034000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=5,HLS_SYN_LUT=77,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv24_FFFFFF : STD_LOGIC_VECTOR (23 downto 0) := "111111111111111111111111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_rst_n_inv : STD_LOGIC;
    signal in_data_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal out_data_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal p_last_V_fu_108_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_flush_enable : STD_LOGIC;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal regslice_both_out_data_V_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal regslice_both_in_data_V_data_V_U_apdone_blk : STD_LOGIC;
    signal in_data_TDATA_int_regslice : STD_LOGIC_VECTOR (23 downto 0);
    signal in_data_TVALID_int_regslice : STD_LOGIC;
    signal in_data_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_in_data_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_data_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal in_data_TKEEP_int_regslice : STD_LOGIC_VECTOR (2 downto 0);
    signal regslice_both_in_data_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in_data_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_data_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal in_data_TSTRB_int_regslice : STD_LOGIC_VECTOR (2 downto 0);
    signal regslice_both_in_data_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in_data_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_data_V_user_V_U_apdone_blk : STD_LOGIC;
    signal in_data_TUSER_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_in_data_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in_data_V_user_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_data_V_last_V_U_apdone_blk : STD_LOGIC;
    signal in_data_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_in_data_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in_data_V_last_V_U_ack_in : STD_LOGIC;
    signal out_data_TDATA_int_regslice : STD_LOGIC_VECTOR (23 downto 0);
    signal out_data_TVALID_int_regslice : STD_LOGIC;
    signal out_data_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_out_data_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out_data_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out_data_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_data_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out_data_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out_data_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_data_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out_data_V_user_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out_data_V_user_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_data_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out_data_V_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out_data_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_data_V_last_V_U_vld_out : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component Invert_Color_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    regslice_both_in_data_V_data_V_U : component Invert_Color_regslice_both
    generic map (
        DataWidth => 24)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_data_TDATA,
        vld_in => in_data_TVALID,
        ack_in => regslice_both_in_data_V_data_V_U_ack_in,
        data_out => in_data_TDATA_int_regslice,
        vld_out => in_data_TVALID_int_regslice,
        ack_out => in_data_TREADY_int_regslice,
        apdone_blk => regslice_both_in_data_V_data_V_U_apdone_blk);

    regslice_both_in_data_V_keep_V_U : component Invert_Color_regslice_both
    generic map (
        DataWidth => 3)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_data_TKEEP,
        vld_in => in_data_TVALID,
        ack_in => regslice_both_in_data_V_keep_V_U_ack_in,
        data_out => in_data_TKEEP_int_regslice,
        vld_out => regslice_both_in_data_V_keep_V_U_vld_out,
        ack_out => in_data_TREADY_int_regslice,
        apdone_blk => regslice_both_in_data_V_keep_V_U_apdone_blk);

    regslice_both_in_data_V_strb_V_U : component Invert_Color_regslice_both
    generic map (
        DataWidth => 3)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_data_TSTRB,
        vld_in => in_data_TVALID,
        ack_in => regslice_both_in_data_V_strb_V_U_ack_in,
        data_out => in_data_TSTRB_int_regslice,
        vld_out => regslice_both_in_data_V_strb_V_U_vld_out,
        ack_out => in_data_TREADY_int_regslice,
        apdone_blk => regslice_both_in_data_V_strb_V_U_apdone_blk);

    regslice_both_in_data_V_user_V_U : component Invert_Color_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_data_TUSER,
        vld_in => in_data_TVALID,
        ack_in => regslice_both_in_data_V_user_V_U_ack_in,
        data_out => in_data_TUSER_int_regslice,
        vld_out => regslice_both_in_data_V_user_V_U_vld_out,
        ack_out => in_data_TREADY_int_regslice,
        apdone_blk => regslice_both_in_data_V_user_V_U_apdone_blk);

    regslice_both_in_data_V_last_V_U : component Invert_Color_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_data_TLAST,
        vld_in => in_data_TVALID,
        ack_in => regslice_both_in_data_V_last_V_U_ack_in,
        data_out => in_data_TLAST_int_regslice,
        vld_out => regslice_both_in_data_V_last_V_U_vld_out,
        ack_out => in_data_TREADY_int_regslice,
        apdone_blk => regslice_both_in_data_V_last_V_U_apdone_blk);

    regslice_both_out_data_V_data_V_U : component Invert_Color_regslice_both
    generic map (
        DataWidth => 24)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => out_data_TDATA_int_regslice,
        vld_in => out_data_TVALID_int_regslice,
        ack_in => out_data_TREADY_int_regslice,
        data_out => out_data_TDATA,
        vld_out => regslice_both_out_data_V_data_V_U_vld_out,
        ack_out => out_data_TREADY,
        apdone_blk => regslice_both_out_data_V_data_V_U_apdone_blk);

    regslice_both_out_data_V_keep_V_U : component Invert_Color_regslice_both
    generic map (
        DataWidth => 3)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_data_TKEEP_int_regslice,
        vld_in => out_data_TVALID_int_regslice,
        ack_in => regslice_both_out_data_V_keep_V_U_ack_in_dummy,
        data_out => out_data_TKEEP,
        vld_out => regslice_both_out_data_V_keep_V_U_vld_out,
        ack_out => out_data_TREADY,
        apdone_blk => regslice_both_out_data_V_keep_V_U_apdone_blk);

    regslice_both_out_data_V_strb_V_U : component Invert_Color_regslice_both
    generic map (
        DataWidth => 3)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_data_TSTRB_int_regslice,
        vld_in => out_data_TVALID_int_regslice,
        ack_in => regslice_both_out_data_V_strb_V_U_ack_in_dummy,
        data_out => out_data_TSTRB,
        vld_out => regslice_both_out_data_V_strb_V_U_vld_out,
        ack_out => out_data_TREADY,
        apdone_blk => regslice_both_out_data_V_strb_V_U_apdone_blk);

    regslice_both_out_data_V_user_V_U : component Invert_Color_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_data_TUSER_int_regslice,
        vld_in => out_data_TVALID_int_regslice,
        ack_in => regslice_both_out_data_V_user_V_U_ack_in_dummy,
        data_out => out_data_TUSER,
        vld_out => regslice_both_out_data_V_user_V_U_vld_out,
        ack_out => out_data_TREADY,
        apdone_blk => regslice_both_out_data_V_user_V_U_apdone_blk);

    regslice_both_out_data_V_last_V_U : component Invert_Color_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_data_TLAST_int_regslice,
        vld_in => out_data_TVALID_int_regslice,
        ack_in => regslice_both_out_data_V_last_V_U_ack_in_dummy,
        data_out => out_data_TLAST,
        vld_out => regslice_both_out_data_V_last_V_U_vld_out,
        ack_out => out_data_TREADY,
        apdone_blk => regslice_both_out_data_V_last_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp0_flush_enable)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, ap_CS_fsm_state4, regslice_both_out_data_V_data_V_U_apdone_blk)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (regslice_both_out_data_V_data_V_U_apdone_blk = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state4 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, in_data_TVALID_int_regslice, out_data_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (out_data_TREADY_int_regslice = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and ((out_data_TREADY_int_regslice = ap_const_logic_0) or (in_data_TVALID_int_regslice = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, in_data_TVALID_int_regslice, out_data_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (out_data_TREADY_int_regslice = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and ((out_data_TREADY_int_regslice = ap_const_logic_0) or (in_data_TVALID_int_regslice = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, in_data_TVALID_int_regslice, out_data_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (out_data_TREADY_int_regslice = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and ((out_data_TREADY_int_regslice = ap_const_logic_0) or (in_data_TVALID_int_regslice = ap_const_logic_0))));
    end process;


    ap_block_state2_pp0_stage0_iter0_assign_proc : process(in_data_TVALID_int_regslice, out_data_TREADY_int_regslice)
    begin
                ap_block_state2_pp0_stage0_iter0 <= ((out_data_TREADY_int_regslice = ap_const_logic_0) or (in_data_TVALID_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state3_pp0_stage0_iter1_assign_proc : process(out_data_TREADY_int_regslice)
    begin
                ap_block_state3_pp0_stage0_iter1 <= (out_data_TREADY_int_regslice = ap_const_logic_0);
    end process;


    ap_condition_pp0_flush_enable_assign_proc : process(ap_CS_fsm_pp0_stage0, p_last_V_fu_108_p1, ap_block_pp0_stage0_subdone)
    begin
        if (((p_last_V_fu_108_p1 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_pp0_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp0_flush_enable <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    in_data_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, in_data_TVALID_int_regslice)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_data_TDATA_blk_n <= in_data_TVALID_int_regslice;
        else 
            in_data_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in_data_TREADY <= regslice_both_in_data_V_data_V_U_ack_in;

    in_data_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_data_TREADY_int_regslice <= ap_const_logic_1;
        else 
            in_data_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    out_data_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1, out_data_TREADY_int_regslice)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            out_data_TDATA_blk_n <= out_data_TREADY_int_regslice;
        else 
            out_data_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_data_TDATA_int_regslice <= (in_data_TDATA_int_regslice xor ap_const_lv24_FFFFFF);
    out_data_TVALID <= regslice_both_out_data_V_data_V_U_vld_out;

    out_data_TVALID_int_regslice_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            out_data_TVALID_int_regslice <= ap_const_logic_1;
        else 
            out_data_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    p_last_V_fu_108_p1 <= in_data_TLAST_int_regslice;
end behav;
