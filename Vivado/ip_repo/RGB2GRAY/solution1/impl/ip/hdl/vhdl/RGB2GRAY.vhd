-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity RGB2GRAY is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    in_data_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
    in_data_TVALID : IN STD_LOGIC;
    in_data_TREADY : OUT STD_LOGIC;
    in_data_TKEEP : IN STD_LOGIC_VECTOR (2 downto 0);
    in_data_TSTRB : IN STD_LOGIC_VECTOR (2 downto 0);
    in_data_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    in_data_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    in_data_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    in_data_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    out_data_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_data_TVALID : OUT STD_LOGIC;
    out_data_TREADY : IN STD_LOGIC;
    out_data_TKEEP : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_data_TSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_data_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_data_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_data_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_data_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of RGB2GRAY is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "RGB2GRAY_RGB2GRAY,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.297000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=3292,HLS_SYN_LUT=4606,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv64_3FBD2F1A9FBE76C9 : STD_LOGIC_VECTOR (63 downto 0) := "0011111110111101001011110001101010011111101111100111011011001001";
    constant ap_const_lv64_3FE2C8B439581062 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111100010110010001011010000111001010110000001000001100010";
    constant ap_const_lv64_3FD322D0E5604189 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111010011001000101101000011100101011000000100000110001001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_433 : STD_LOGIC_VECTOR (11 downto 0) := "010000110011";
    constant ap_const_lv11_433 : STD_LOGIC_VECTOR (10 downto 0) := "10000110011";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv12_36 : STD_LOGIC_VECTOR (11 downto 0) := "000000110110";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_rst_n_inv : STD_LOGIC;
    signal in_data_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal out_data_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter30 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter31 : STD_LOGIC := '0';
    signal p_last_V_fu_204_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_last_V_reg_486 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter20 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter21 : BOOLEAN;
    signal ap_block_state24_pp0_stage0_iter22 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter23 : BOOLEAN;
    signal ap_block_state26_pp0_stage0_iter24 : BOOLEAN;
    signal ap_block_state27_pp0_stage0_iter25 : BOOLEAN;
    signal ap_block_state28_pp0_stage0_iter26 : BOOLEAN;
    signal ap_block_state29_pp0_stage0_iter27 : BOOLEAN;
    signal ap_block_state30_pp0_stage0_iter28 : BOOLEAN;
    signal ap_block_state31_pp0_stage0_iter29 : BOOLEAN;
    signal ap_block_state32_pp0_stage0_iter30 : BOOLEAN;
    signal ap_block_state33_pp0_stage0_iter31 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal p_last_V_reg_486_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_last_V_reg_486_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_last_V_reg_486_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_last_V_reg_486_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_last_V_reg_486_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_last_V_reg_486_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_last_V_reg_486_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_last_V_reg_486_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_last_V_reg_486_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_last_V_reg_486_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_last_V_reg_486_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_last_V_reg_486_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_last_V_reg_486_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_last_V_reg_486_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_last_V_reg_486_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_last_V_reg_486_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_last_V_reg_486_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_last_V_reg_486_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_last_V_reg_486_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_last_V_reg_486_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_last_V_reg_486_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_last_V_reg_486_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_last_V_reg_486_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_last_V_reg_486_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_last_V_reg_486_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_last_V_reg_486_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_last_V_reg_486_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_last_V_reg_486_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_last_V_reg_486_pp0_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal op2_1_fu_208_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal op2_1_reg_491 : STD_LOGIC_VECTOR (7 downto 0);
    signal op2_1_reg_491_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal op2_1_reg_491_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal op2_1_reg_491_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal op2_1_reg_491_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal op2_1_reg_491_pp0_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal op2_1_reg_491_pp0_iter6_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal gray_strb_V_fu_242_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal gray_strb_V_reg_506 : STD_LOGIC_VECTOR (0 downto 0);
    signal gray_strb_V_reg_506_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gray_strb_V_reg_506_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gray_strb_V_reg_506_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gray_strb_V_reg_506_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gray_strb_V_reg_506_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gray_strb_V_reg_506_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gray_strb_V_reg_506_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gray_strb_V_reg_506_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gray_strb_V_reg_506_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gray_strb_V_reg_506_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gray_strb_V_reg_506_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gray_strb_V_reg_506_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gray_strb_V_reg_506_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gray_strb_V_reg_506_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gray_strb_V_reg_506_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gray_strb_V_reg_506_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gray_strb_V_reg_506_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gray_strb_V_reg_506_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gray_strb_V_reg_506_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gray_strb_V_reg_506_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gray_strb_V_reg_506_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gray_strb_V_reg_506_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gray_strb_V_reg_506_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gray_strb_V_reg_506_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gray_strb_V_reg_506_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gray_strb_V_reg_506_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gray_strb_V_reg_506_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gray_strb_V_reg_506_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gray_strb_V_reg_506_pp0_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gray_keep_V_fu_246_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal gray_keep_V_reg_511 : STD_LOGIC_VECTOR (0 downto 0);
    signal gray_keep_V_reg_511_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gray_keep_V_reg_511_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gray_keep_V_reg_511_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gray_keep_V_reg_511_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gray_keep_V_reg_511_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gray_keep_V_reg_511_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gray_keep_V_reg_511_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gray_keep_V_reg_511_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gray_keep_V_reg_511_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gray_keep_V_reg_511_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gray_keep_V_reg_511_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gray_keep_V_reg_511_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gray_keep_V_reg_511_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gray_keep_V_reg_511_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gray_keep_V_reg_511_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gray_keep_V_reg_511_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gray_keep_V_reg_511_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gray_keep_V_reg_511_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gray_keep_V_reg_511_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gray_keep_V_reg_511_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gray_keep_V_reg_511_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gray_keep_V_reg_511_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gray_keep_V_reg_511_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gray_keep_V_reg_511_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gray_keep_V_reg_511_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gray_keep_V_reg_511_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gray_keep_V_reg_511_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gray_keep_V_reg_511_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gray_keep_V_reg_511_pp0_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_183_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv_i1_reg_516 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_186_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv_i2_reg_521 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_168_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_i1_reg_531 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_173_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_i2_reg_536 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_189_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv_i7_reg_541 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_160_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_reg_546 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_178_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_i_reg_551 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_164_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal val_reg_556 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_fu_254_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_reg_561 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_s_reg_566 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_reg_566_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_reg_566_pp0_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln328_fu_283_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln328_reg_571 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln328_reg_571_pp0_iter28_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln323_fu_287_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln323_reg_577 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln323_reg_577_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_amt_fu_293_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_reg_584 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln327_fu_299_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln327_reg_591 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln327_reg_591_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln329_fu_305_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln329_reg_597 : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_amt_1_fu_331_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_1_reg_603 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln330_fu_390_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln330_reg_608 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln337_fu_409_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln337_reg_613 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln330_fu_427_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln330_reg_618 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln327_fu_467_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln327_reg_623 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_flush_enable : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter26 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter27 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter28 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter29 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal grp_fu_183_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_186_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_189_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_fu_212_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal op2_fu_227_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal exp_fu_269_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln306_fu_257_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln311_fu_279_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln315_fu_311_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Result_1_fu_314_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal tmp_fu_336_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln331_fu_352_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln320_fu_322_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal zext_ln331_fu_355_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal lshr_ln331_fu_359_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal or_ln327_fu_369_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln327_fu_373_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln329_fu_379_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln330_fu_326_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln330_fu_384_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln331_fu_365_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln329_fu_398_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln337_fu_346_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln329_fu_403_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln330_fu_415_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln330_1_fu_421_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln326_fu_432_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln326cast_fu_435_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln339_fu_439_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln337_fu_444_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln323_fu_457_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln327_fu_462_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln330_1_fu_450_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln455_fu_474_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_160_ce : STD_LOGIC;
    signal grp_fu_164_ce : STD_LOGIC;
    signal grp_fu_168_ce : STD_LOGIC;
    signal grp_fu_173_ce : STD_LOGIC;
    signal grp_fu_178_ce : STD_LOGIC;
    signal grp_fu_183_ce : STD_LOGIC;
    signal grp_fu_186_ce : STD_LOGIC;
    signal grp_fu_189_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal regslice_both_out_data_V_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal regslice_both_in_data_V_data_V_U_apdone_blk : STD_LOGIC;
    signal in_data_TDATA_int_regslice : STD_LOGIC_VECTOR (23 downto 0);
    signal in_data_TVALID_int_regslice : STD_LOGIC;
    signal in_data_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_in_data_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_data_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal in_data_TKEEP_int_regslice : STD_LOGIC_VECTOR (2 downto 0);
    signal regslice_both_in_data_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in_data_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_data_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal in_data_TSTRB_int_regslice : STD_LOGIC_VECTOR (2 downto 0);
    signal regslice_both_in_data_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in_data_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_data_V_user_V_U_apdone_blk : STD_LOGIC;
    signal in_data_TUSER_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_in_data_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in_data_V_user_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_data_V_last_V_U_apdone_blk : STD_LOGIC;
    signal in_data_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_in_data_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in_data_V_last_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_data_V_id_V_U_apdone_blk : STD_LOGIC;
    signal in_data_TID_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_in_data_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in_data_V_id_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_data_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal in_data_TDEST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_in_data_V_dest_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in_data_V_dest_V_U_ack_in : STD_LOGIC;
    signal out_data_TDATA_int_regslice : STD_LOGIC_VECTOR (7 downto 0);
    signal out_data_TVALID_int_regslice : STD_LOGIC;
    signal out_data_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_out_data_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out_data_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out_data_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_data_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out_data_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out_data_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_data_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out_data_V_user_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out_data_V_user_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_data_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out_data_V_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out_data_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_data_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out_data_V_id_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out_data_V_id_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_data_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out_data_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out_data_V_dest_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_data_V_dest_V_U_vld_out : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component RGB2GRAY_dadd_64ns_64ns_64_7_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component RGB2GRAY_dmul_64ns_64ns_64_7_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component RGB2GRAY_uitodp_32ns_64_6_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component RGB2GRAY_sitodp_64ns_64_6_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component RGB2GRAY_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    dadd_64ns_64ns_64_7_full_dsp_1_U1 : component RGB2GRAY_dadd_64ns_64ns_64_7_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => mul_i1_reg_531,
        din1 => mul_i2_reg_536,
        ce => grp_fu_160_ce,
        dout => grp_fu_160_p2);

    dadd_64ns_64ns_64_7_full_dsp_1_U2 : component RGB2GRAY_dadd_64ns_64ns_64_7_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => add_reg_546,
        din1 => mul_i_reg_551,
        ce => grp_fu_164_ce,
        dout => grp_fu_164_p2);

    dmul_64ns_64ns_64_7_max_dsp_1_U3 : component RGB2GRAY_dmul_64ns_64ns_64_7_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => conv_i1_reg_516,
        din1 => ap_const_lv64_3FBD2F1A9FBE76C9,
        ce => grp_fu_168_ce,
        dout => grp_fu_168_p2);

    dmul_64ns_64ns_64_7_max_dsp_1_U4 : component RGB2GRAY_dmul_64ns_64ns_64_7_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => conv_i2_reg_521,
        din1 => ap_const_lv64_3FE2C8B439581062,
        ce => grp_fu_173_ce,
        dout => grp_fu_173_p2);

    dmul_64ns_64ns_64_7_max_dsp_1_U5 : component RGB2GRAY_dmul_64ns_64ns_64_7_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => conv_i7_reg_541,
        din1 => ap_const_lv64_3FD322D0E5604189,
        ce => grp_fu_178_ce,
        dout => grp_fu_178_p2);

    uitodp_32ns_64_6_no_dsp_1_U6 : component RGB2GRAY_uitodp_32ns_64_6_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_183_p0,
        ce => grp_fu_183_ce,
        dout => grp_fu_183_p1);

    sitodp_64ns_64_6_no_dsp_1_U7 : component RGB2GRAY_sitodp_64ns_64_6_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_186_p0,
        ce => grp_fu_186_ce,
        dout => grp_fu_186_p1);

    sitodp_64ns_64_6_no_dsp_1_U8 : component RGB2GRAY_sitodp_64ns_64_6_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_189_p0,
        ce => grp_fu_189_ce,
        dout => grp_fu_189_p1);

    regslice_both_in_data_V_data_V_U : component RGB2GRAY_regslice_both
    generic map (
        DataWidth => 24)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_data_TDATA,
        vld_in => in_data_TVALID,
        ack_in => regslice_both_in_data_V_data_V_U_ack_in,
        data_out => in_data_TDATA_int_regslice,
        vld_out => in_data_TVALID_int_regslice,
        ack_out => in_data_TREADY_int_regslice,
        apdone_blk => regslice_both_in_data_V_data_V_U_apdone_blk);

    regslice_both_in_data_V_keep_V_U : component RGB2GRAY_regslice_both
    generic map (
        DataWidth => 3)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_data_TKEEP,
        vld_in => in_data_TVALID,
        ack_in => regslice_both_in_data_V_keep_V_U_ack_in,
        data_out => in_data_TKEEP_int_regslice,
        vld_out => regslice_both_in_data_V_keep_V_U_vld_out,
        ack_out => in_data_TREADY_int_regslice,
        apdone_blk => regslice_both_in_data_V_keep_V_U_apdone_blk);

    regslice_both_in_data_V_strb_V_U : component RGB2GRAY_regslice_both
    generic map (
        DataWidth => 3)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_data_TSTRB,
        vld_in => in_data_TVALID,
        ack_in => regslice_both_in_data_V_strb_V_U_ack_in,
        data_out => in_data_TSTRB_int_regslice,
        vld_out => regslice_both_in_data_V_strb_V_U_vld_out,
        ack_out => in_data_TREADY_int_regslice,
        apdone_blk => regslice_both_in_data_V_strb_V_U_apdone_blk);

    regslice_both_in_data_V_user_V_U : component RGB2GRAY_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_data_TUSER,
        vld_in => in_data_TVALID,
        ack_in => regslice_both_in_data_V_user_V_U_ack_in,
        data_out => in_data_TUSER_int_regslice,
        vld_out => regslice_both_in_data_V_user_V_U_vld_out,
        ack_out => in_data_TREADY_int_regslice,
        apdone_blk => regslice_both_in_data_V_user_V_U_apdone_blk);

    regslice_both_in_data_V_last_V_U : component RGB2GRAY_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_data_TLAST,
        vld_in => in_data_TVALID,
        ack_in => regslice_both_in_data_V_last_V_U_ack_in,
        data_out => in_data_TLAST_int_regslice,
        vld_out => regslice_both_in_data_V_last_V_U_vld_out,
        ack_out => in_data_TREADY_int_regslice,
        apdone_blk => regslice_both_in_data_V_last_V_U_apdone_blk);

    regslice_both_in_data_V_id_V_U : component RGB2GRAY_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_data_TID,
        vld_in => in_data_TVALID,
        ack_in => regslice_both_in_data_V_id_V_U_ack_in,
        data_out => in_data_TID_int_regslice,
        vld_out => regslice_both_in_data_V_id_V_U_vld_out,
        ack_out => in_data_TREADY_int_regslice,
        apdone_blk => regslice_both_in_data_V_id_V_U_apdone_blk);

    regslice_both_in_data_V_dest_V_U : component RGB2GRAY_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_data_TDEST,
        vld_in => in_data_TVALID,
        ack_in => regslice_both_in_data_V_dest_V_U_ack_in,
        data_out => in_data_TDEST_int_regslice,
        vld_out => regslice_both_in_data_V_dest_V_U_vld_out,
        ack_out => in_data_TREADY_int_regslice,
        apdone_blk => regslice_both_in_data_V_dest_V_U_apdone_blk);

    regslice_both_out_data_V_data_V_U : component RGB2GRAY_regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => out_data_TDATA_int_regslice,
        vld_in => out_data_TVALID_int_regslice,
        ack_in => out_data_TREADY_int_regslice,
        data_out => out_data_TDATA,
        vld_out => regslice_both_out_data_V_data_V_U_vld_out,
        ack_out => out_data_TREADY,
        apdone_blk => regslice_both_out_data_V_data_V_U_apdone_blk);

    regslice_both_out_data_V_keep_V_U : component RGB2GRAY_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => gray_keep_V_reg_511_pp0_iter29_reg,
        vld_in => out_data_TVALID_int_regslice,
        ack_in => regslice_both_out_data_V_keep_V_U_ack_in_dummy,
        data_out => out_data_TKEEP,
        vld_out => regslice_both_out_data_V_keep_V_U_vld_out,
        ack_out => out_data_TREADY,
        apdone_blk => regslice_both_out_data_V_keep_V_U_apdone_blk);

    regslice_both_out_data_V_strb_V_U : component RGB2GRAY_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => gray_strb_V_reg_506_pp0_iter29_reg,
        vld_in => out_data_TVALID_int_regslice,
        ack_in => regslice_both_out_data_V_strb_V_U_ack_in_dummy,
        data_out => out_data_TSTRB,
        vld_out => regslice_both_out_data_V_strb_V_U_vld_out,
        ack_out => out_data_TREADY,
        apdone_blk => regslice_both_out_data_V_strb_V_U_apdone_blk);

    regslice_both_out_data_V_user_V_U : component RGB2GRAY_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv1_0,
        vld_in => out_data_TVALID_int_regslice,
        ack_in => regslice_both_out_data_V_user_V_U_ack_in_dummy,
        data_out => out_data_TUSER,
        vld_out => regslice_both_out_data_V_user_V_U_vld_out,
        ack_out => out_data_TREADY,
        apdone_blk => regslice_both_out_data_V_user_V_U_apdone_blk);

    regslice_both_out_data_V_last_V_U : component RGB2GRAY_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => p_last_V_reg_486_pp0_iter29_reg,
        vld_in => out_data_TVALID_int_regslice,
        ack_in => regslice_both_out_data_V_last_V_U_ack_in_dummy,
        data_out => out_data_TLAST,
        vld_out => regslice_both_out_data_V_last_V_U_vld_out,
        ack_out => out_data_TREADY,
        apdone_blk => regslice_both_out_data_V_last_V_U_apdone_blk);

    regslice_both_out_data_V_id_V_U : component RGB2GRAY_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv1_0,
        vld_in => out_data_TVALID_int_regslice,
        ack_in => regslice_both_out_data_V_id_V_U_ack_in_dummy,
        data_out => out_data_TID,
        vld_out => regslice_both_out_data_V_id_V_U_vld_out,
        ack_out => out_data_TREADY,
        apdone_blk => regslice_both_out_data_V_id_V_U_apdone_blk);

    regslice_both_out_data_V_dest_V_U : component RGB2GRAY_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv1_0,
        vld_in => out_data_TVALID_int_regslice,
        ack_in => regslice_both_out_data_V_dest_V_U_ack_in_dummy,
        data_out => out_data_TDEST,
        vld_out => regslice_both_out_data_V_dest_V_U_vld_out,
        ack_out => out_data_TREADY,
        apdone_blk => regslice_both_out_data_V_dest_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp0_flush_enable)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter25 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter27 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter28 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter29 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter30 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter31_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter31 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    ap_enable_reg_pp0_iter31 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_reg_546 <= grp_fu_160_p2;
                and_ln337_reg_613 <= and_ln337_fu_409_p2;
                conv_i1_reg_516 <= grp_fu_183_p1;
                conv_i2_reg_521 <= grp_fu_186_p1;
                conv_i7_reg_541 <= grp_fu_189_p1;
                gray_keep_V_reg_511_pp0_iter10_reg <= gray_keep_V_reg_511_pp0_iter9_reg;
                gray_keep_V_reg_511_pp0_iter11_reg <= gray_keep_V_reg_511_pp0_iter10_reg;
                gray_keep_V_reg_511_pp0_iter12_reg <= gray_keep_V_reg_511_pp0_iter11_reg;
                gray_keep_V_reg_511_pp0_iter13_reg <= gray_keep_V_reg_511_pp0_iter12_reg;
                gray_keep_V_reg_511_pp0_iter14_reg <= gray_keep_V_reg_511_pp0_iter13_reg;
                gray_keep_V_reg_511_pp0_iter15_reg <= gray_keep_V_reg_511_pp0_iter14_reg;
                gray_keep_V_reg_511_pp0_iter16_reg <= gray_keep_V_reg_511_pp0_iter15_reg;
                gray_keep_V_reg_511_pp0_iter17_reg <= gray_keep_V_reg_511_pp0_iter16_reg;
                gray_keep_V_reg_511_pp0_iter18_reg <= gray_keep_V_reg_511_pp0_iter17_reg;
                gray_keep_V_reg_511_pp0_iter19_reg <= gray_keep_V_reg_511_pp0_iter18_reg;
                gray_keep_V_reg_511_pp0_iter20_reg <= gray_keep_V_reg_511_pp0_iter19_reg;
                gray_keep_V_reg_511_pp0_iter21_reg <= gray_keep_V_reg_511_pp0_iter20_reg;
                gray_keep_V_reg_511_pp0_iter22_reg <= gray_keep_V_reg_511_pp0_iter21_reg;
                gray_keep_V_reg_511_pp0_iter23_reg <= gray_keep_V_reg_511_pp0_iter22_reg;
                gray_keep_V_reg_511_pp0_iter24_reg <= gray_keep_V_reg_511_pp0_iter23_reg;
                gray_keep_V_reg_511_pp0_iter25_reg <= gray_keep_V_reg_511_pp0_iter24_reg;
                gray_keep_V_reg_511_pp0_iter26_reg <= gray_keep_V_reg_511_pp0_iter25_reg;
                gray_keep_V_reg_511_pp0_iter27_reg <= gray_keep_V_reg_511_pp0_iter26_reg;
                gray_keep_V_reg_511_pp0_iter28_reg <= gray_keep_V_reg_511_pp0_iter27_reg;
                gray_keep_V_reg_511_pp0_iter29_reg <= gray_keep_V_reg_511_pp0_iter28_reg;
                gray_keep_V_reg_511_pp0_iter2_reg <= gray_keep_V_reg_511_pp0_iter1_reg;
                gray_keep_V_reg_511_pp0_iter3_reg <= gray_keep_V_reg_511_pp0_iter2_reg;
                gray_keep_V_reg_511_pp0_iter4_reg <= gray_keep_V_reg_511_pp0_iter3_reg;
                gray_keep_V_reg_511_pp0_iter5_reg <= gray_keep_V_reg_511_pp0_iter4_reg;
                gray_keep_V_reg_511_pp0_iter6_reg <= gray_keep_V_reg_511_pp0_iter5_reg;
                gray_keep_V_reg_511_pp0_iter7_reg <= gray_keep_V_reg_511_pp0_iter6_reg;
                gray_keep_V_reg_511_pp0_iter8_reg <= gray_keep_V_reg_511_pp0_iter7_reg;
                gray_keep_V_reg_511_pp0_iter9_reg <= gray_keep_V_reg_511_pp0_iter8_reg;
                gray_strb_V_reg_506_pp0_iter10_reg <= gray_strb_V_reg_506_pp0_iter9_reg;
                gray_strb_V_reg_506_pp0_iter11_reg <= gray_strb_V_reg_506_pp0_iter10_reg;
                gray_strb_V_reg_506_pp0_iter12_reg <= gray_strb_V_reg_506_pp0_iter11_reg;
                gray_strb_V_reg_506_pp0_iter13_reg <= gray_strb_V_reg_506_pp0_iter12_reg;
                gray_strb_V_reg_506_pp0_iter14_reg <= gray_strb_V_reg_506_pp0_iter13_reg;
                gray_strb_V_reg_506_pp0_iter15_reg <= gray_strb_V_reg_506_pp0_iter14_reg;
                gray_strb_V_reg_506_pp0_iter16_reg <= gray_strb_V_reg_506_pp0_iter15_reg;
                gray_strb_V_reg_506_pp0_iter17_reg <= gray_strb_V_reg_506_pp0_iter16_reg;
                gray_strb_V_reg_506_pp0_iter18_reg <= gray_strb_V_reg_506_pp0_iter17_reg;
                gray_strb_V_reg_506_pp0_iter19_reg <= gray_strb_V_reg_506_pp0_iter18_reg;
                gray_strb_V_reg_506_pp0_iter20_reg <= gray_strb_V_reg_506_pp0_iter19_reg;
                gray_strb_V_reg_506_pp0_iter21_reg <= gray_strb_V_reg_506_pp0_iter20_reg;
                gray_strb_V_reg_506_pp0_iter22_reg <= gray_strb_V_reg_506_pp0_iter21_reg;
                gray_strb_V_reg_506_pp0_iter23_reg <= gray_strb_V_reg_506_pp0_iter22_reg;
                gray_strb_V_reg_506_pp0_iter24_reg <= gray_strb_V_reg_506_pp0_iter23_reg;
                gray_strb_V_reg_506_pp0_iter25_reg <= gray_strb_V_reg_506_pp0_iter24_reg;
                gray_strb_V_reg_506_pp0_iter26_reg <= gray_strb_V_reg_506_pp0_iter25_reg;
                gray_strb_V_reg_506_pp0_iter27_reg <= gray_strb_V_reg_506_pp0_iter26_reg;
                gray_strb_V_reg_506_pp0_iter28_reg <= gray_strb_V_reg_506_pp0_iter27_reg;
                gray_strb_V_reg_506_pp0_iter29_reg <= gray_strb_V_reg_506_pp0_iter28_reg;
                gray_strb_V_reg_506_pp0_iter2_reg <= gray_strb_V_reg_506_pp0_iter1_reg;
                gray_strb_V_reg_506_pp0_iter3_reg <= gray_strb_V_reg_506_pp0_iter2_reg;
                gray_strb_V_reg_506_pp0_iter4_reg <= gray_strb_V_reg_506_pp0_iter3_reg;
                gray_strb_V_reg_506_pp0_iter5_reg <= gray_strb_V_reg_506_pp0_iter4_reg;
                gray_strb_V_reg_506_pp0_iter6_reg <= gray_strb_V_reg_506_pp0_iter5_reg;
                gray_strb_V_reg_506_pp0_iter7_reg <= gray_strb_V_reg_506_pp0_iter6_reg;
                gray_strb_V_reg_506_pp0_iter8_reg <= gray_strb_V_reg_506_pp0_iter7_reg;
                gray_strb_V_reg_506_pp0_iter9_reg <= gray_strb_V_reg_506_pp0_iter8_reg;
                icmp_ln323_reg_577 <= icmp_ln323_fu_287_p2;
                icmp_ln323_reg_577_pp0_iter28_reg <= icmp_ln323_reg_577;
                icmp_ln327_reg_591 <= icmp_ln327_fu_299_p2;
                icmp_ln327_reg_591_pp0_iter28_reg <= icmp_ln327_reg_591;
                icmp_ln329_reg_597 <= icmp_ln329_fu_305_p2;
                mul_i1_reg_531 <= grp_fu_168_p2;
                mul_i2_reg_536 <= grp_fu_173_p2;
                mul_i_reg_551 <= grp_fu_178_p2;
                op2_1_reg_491_pp0_iter2_reg <= op2_1_reg_491_pp0_iter1_reg;
                op2_1_reg_491_pp0_iter3_reg <= op2_1_reg_491_pp0_iter2_reg;
                op2_1_reg_491_pp0_iter4_reg <= op2_1_reg_491_pp0_iter3_reg;
                op2_1_reg_491_pp0_iter5_reg <= op2_1_reg_491_pp0_iter4_reg;
                op2_1_reg_491_pp0_iter6_reg <= op2_1_reg_491_pp0_iter5_reg;
                or_ln330_reg_618 <= or_ln330_fu_427_p2;
                p_Result_s_reg_566 <= reg_fu_254_p1(63 downto 63);
                p_Result_s_reg_566_pp0_iter28_reg <= p_Result_s_reg_566;
                p_Result_s_reg_566_pp0_iter29_reg <= p_Result_s_reg_566_pp0_iter28_reg;
                p_last_V_reg_486_pp0_iter10_reg <= p_last_V_reg_486_pp0_iter9_reg;
                p_last_V_reg_486_pp0_iter11_reg <= p_last_V_reg_486_pp0_iter10_reg;
                p_last_V_reg_486_pp0_iter12_reg <= p_last_V_reg_486_pp0_iter11_reg;
                p_last_V_reg_486_pp0_iter13_reg <= p_last_V_reg_486_pp0_iter12_reg;
                p_last_V_reg_486_pp0_iter14_reg <= p_last_V_reg_486_pp0_iter13_reg;
                p_last_V_reg_486_pp0_iter15_reg <= p_last_V_reg_486_pp0_iter14_reg;
                p_last_V_reg_486_pp0_iter16_reg <= p_last_V_reg_486_pp0_iter15_reg;
                p_last_V_reg_486_pp0_iter17_reg <= p_last_V_reg_486_pp0_iter16_reg;
                p_last_V_reg_486_pp0_iter18_reg <= p_last_V_reg_486_pp0_iter17_reg;
                p_last_V_reg_486_pp0_iter19_reg <= p_last_V_reg_486_pp0_iter18_reg;
                p_last_V_reg_486_pp0_iter20_reg <= p_last_V_reg_486_pp0_iter19_reg;
                p_last_V_reg_486_pp0_iter21_reg <= p_last_V_reg_486_pp0_iter20_reg;
                p_last_V_reg_486_pp0_iter22_reg <= p_last_V_reg_486_pp0_iter21_reg;
                p_last_V_reg_486_pp0_iter23_reg <= p_last_V_reg_486_pp0_iter22_reg;
                p_last_V_reg_486_pp0_iter24_reg <= p_last_V_reg_486_pp0_iter23_reg;
                p_last_V_reg_486_pp0_iter25_reg <= p_last_V_reg_486_pp0_iter24_reg;
                p_last_V_reg_486_pp0_iter26_reg <= p_last_V_reg_486_pp0_iter25_reg;
                p_last_V_reg_486_pp0_iter27_reg <= p_last_V_reg_486_pp0_iter26_reg;
                p_last_V_reg_486_pp0_iter28_reg <= p_last_V_reg_486_pp0_iter27_reg;
                p_last_V_reg_486_pp0_iter29_reg <= p_last_V_reg_486_pp0_iter28_reg;
                p_last_V_reg_486_pp0_iter2_reg <= p_last_V_reg_486_pp0_iter1_reg;
                p_last_V_reg_486_pp0_iter3_reg <= p_last_V_reg_486_pp0_iter2_reg;
                p_last_V_reg_486_pp0_iter4_reg <= p_last_V_reg_486_pp0_iter3_reg;
                p_last_V_reg_486_pp0_iter5_reg <= p_last_V_reg_486_pp0_iter4_reg;
                p_last_V_reg_486_pp0_iter6_reg <= p_last_V_reg_486_pp0_iter5_reg;
                p_last_V_reg_486_pp0_iter7_reg <= p_last_V_reg_486_pp0_iter6_reg;
                p_last_V_reg_486_pp0_iter8_reg <= p_last_V_reg_486_pp0_iter7_reg;
                p_last_V_reg_486_pp0_iter9_reg <= p_last_V_reg_486_pp0_iter8_reg;
                reg_reg_561 <= reg_fu_254_p1;
                select_ln327_reg_623 <= select_ln327_fu_467_p3;
                select_ln330_reg_608 <= select_ln330_fu_390_p3;
                sh_amt_1_reg_603 <= sh_amt_1_fu_331_p2;
                sh_amt_reg_584 <= sh_amt_fu_293_p2;
                trunc_ln328_reg_571 <= trunc_ln328_fu_283_p1;
                trunc_ln328_reg_571_pp0_iter28_reg <= trunc_ln328_reg_571;
                val_reg_556 <= grp_fu_164_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                gray_keep_V_reg_511 <= gray_keep_V_fu_246_p1;
                gray_keep_V_reg_511_pp0_iter1_reg <= gray_keep_V_reg_511;
                gray_strb_V_reg_506 <= gray_strb_V_fu_242_p1;
                gray_strb_V_reg_506_pp0_iter1_reg <= gray_strb_V_reg_506;
                op2_1_reg_491 <= op2_1_fu_208_p1;
                op2_1_reg_491_pp0_iter1_reg <= op2_1_reg_491;
                p_last_V_reg_486 <= in_data_TLAST_int_regslice;
                p_last_V_reg_486_pp0_iter1_reg <= p_last_V_reg_486;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_enable_reg_pp0_iter30, ap_enable_reg_pp0_iter31, ap_block_pp0_stage0_subdone, ap_CS_fsm_state34, regslice_both_out_data_V_data_V_U_apdone_blk)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_enable_reg_pp0_iter31 = ap_const_logic_1) and (ap_enable_reg_pp0_iter30 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter31 = ap_const_logic_1) and (ap_enable_reg_pp0_iter30 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state34 => 
                if (((regslice_both_out_data_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state34))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state34;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    and_ln327_fu_462_p2 <= (xor_ln323_fu_457_p2 and icmp_ln327_reg_591_pp0_iter28_reg);
    and_ln329_fu_379_p2 <= (xor_ln327_fu_373_p2 and icmp_ln329_reg_597);
    and_ln330_1_fu_421_p2 <= (xor_ln330_fu_415_p2 and and_ln329_fu_379_p2);
    and_ln330_fu_384_p2 <= (icmp_ln330_fu_326_p2 and and_ln329_fu_379_p2);
    and_ln337_fu_409_p2 <= (xor_ln329_fu_403_p2 and icmp_ln337_fu_346_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state34 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter30, ap_enable_reg_pp0_iter31, in_data_TVALID_int_regslice, out_data_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_01001 <= (((out_data_TREADY_int_regslice = ap_const_logic_0) and (ap_enable_reg_pp0_iter31 = ap_const_logic_1)) or ((out_data_TREADY_int_regslice = ap_const_logic_0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_1)) or ((in_data_TVALID_int_regslice = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter30, ap_enable_reg_pp0_iter31, in_data_TVALID_int_regslice, out_data_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_11001 <= (((out_data_TREADY_int_regslice = ap_const_logic_0) and (ap_enable_reg_pp0_iter31 = ap_const_logic_1)) or ((out_data_TREADY_int_regslice = ap_const_logic_0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_1)) or ((in_data_TVALID_int_regslice = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter30, ap_enable_reg_pp0_iter31, in_data_TVALID_int_regslice, out_data_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_subdone <= (((out_data_TREADY_int_regslice = ap_const_logic_0) and (ap_enable_reg_pp0_iter31 = ap_const_logic_1)) or ((out_data_TREADY_int_regslice = ap_const_logic_0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_1)) or ((in_data_TVALID_int_regslice = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;

        ap_block_state10_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage0_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage0_iter25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage0_iter26 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage0_iter27 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage0_iter0_assign_proc : process(in_data_TVALID_int_regslice)
    begin
                ap_block_state2_pp0_stage0_iter0 <= (in_data_TVALID_int_regslice = ap_const_logic_0);
    end process;

        ap_block_state30_pp0_stage0_iter28 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp0_stage0_iter29 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state32_pp0_stage0_iter30_assign_proc : process(out_data_TREADY_int_regslice)
    begin
                ap_block_state32_pp0_stage0_iter30 <= (out_data_TREADY_int_regslice = ap_const_logic_0);
    end process;


    ap_block_state33_pp0_stage0_iter31_assign_proc : process(out_data_TREADY_int_regslice)
    begin
                ap_block_state33_pp0_stage0_iter31 <= (out_data_TREADY_int_regslice = ap_const_logic_0);
    end process;

        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_flush_enable_assign_proc : process(ap_CS_fsm_pp0_stage0, p_last_V_fu_204_p1, ap_block_pp0_stage0_subdone)
    begin
        if (((p_last_V_fu_204_p1 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_pp0_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp0_flush_enable <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter30, ap_enable_reg_pp0_iter31, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_enable_reg_pp0_iter29)
    begin
        if (((ap_enable_reg_pp0_iter31 = ap_const_logic_0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0) and (ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    exp_fu_269_p4 <= reg_fu_254_p1(62 downto 52);
    gray_keep_V_fu_246_p1 <= in_data_TKEEP_int_regslice(1 - 1 downto 0);
    gray_strb_V_fu_242_p1 <= in_data_TSTRB_int_regslice(1 - 1 downto 0);

    grp_fu_160_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_160_ce <= ap_const_logic_1;
        else 
            grp_fu_160_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_164_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_164_ce <= ap_const_logic_1;
        else 
            grp_fu_164_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_168_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_168_ce <= ap_const_logic_1;
        else 
            grp_fu_168_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_173_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_173_ce <= ap_const_logic_1;
        else 
            grp_fu_173_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_178_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_178_ce <= ap_const_logic_1;
        else 
            grp_fu_178_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_183_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_183_ce <= ap_const_logic_1;
        else 
            grp_fu_183_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_183_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_fu_212_p4),32));

    grp_fu_186_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_186_ce <= ap_const_logic_1;
        else 
            grp_fu_186_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_186_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(op2_fu_227_p4),64));

    grp_fu_189_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_189_ce <= ap_const_logic_1;
        else 
            grp_fu_189_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_189_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(op2_1_reg_491_pp0_iter6_reg),64));
    icmp_ln323_fu_287_p2 <= "1" when (trunc_ln306_fu_257_p1 = ap_const_lv63_0) else "0";
    icmp_ln327_fu_299_p2 <= "1" when (exp_fu_269_p4 = ap_const_lv11_433) else "0";
    icmp_ln329_fu_305_p2 <= "1" when (signed(sh_amt_fu_293_p2) > signed(ap_const_lv12_0)) else "0";
    icmp_ln330_fu_326_p2 <= "1" when (signed(sh_amt_reg_584) < signed(ap_const_lv12_36)) else "0";
    icmp_ln337_fu_346_p2 <= "1" when (signed(tmp_fu_336_p4) < signed(ap_const_lv9_1)) else "0";

    in_data_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, in_data_TVALID_int_regslice)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_data_TDATA_blk_n <= in_data_TVALID_int_regslice;
        else 
            in_data_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in_data_TREADY <= regslice_both_in_data_V_data_V_U_ack_in;

    in_data_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_data_TREADY_int_regslice <= ap_const_logic_1;
        else 
            in_data_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    lshr_ln331_fu_359_p2 <= std_logic_vector(shift_right(unsigned(zext_ln320_fu_322_p1),to_integer(unsigned('0' & zext_ln331_fu_355_p1(31-1 downto 0)))));
    op2_1_fu_208_p1 <= in_data_TDATA_int_regslice(8 - 1 downto 0);
    op2_fu_227_p4 <= in_data_TDATA_int_regslice(15 downto 8);
    or_ln327_fu_369_p2 <= (icmp_ln327_reg_591 or icmp_ln323_reg_577);
    or_ln329_fu_398_p2 <= (or_ln327_fu_369_p2 or icmp_ln329_reg_597);
    or_ln330_fu_427_p2 <= (icmp_ln323_reg_577 or and_ln330_1_fu_421_p2);

    out_data_TDATA_blk_n_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter30, ap_enable_reg_pp0_iter31, out_data_TREADY_int_regslice)
    begin
        if ((((ap_enable_reg_pp0_iter31 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_enable_reg_pp0_iter30 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            out_data_TDATA_blk_n <= out_data_TREADY_int_regslice;
        else 
            out_data_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_data_TDATA_int_regslice <= 
        sub_ln455_fu_474_p2 when (p_Result_s_reg_566_pp0_iter29_reg(0) = '1') else 
        select_ln327_reg_623;
    out_data_TVALID <= regslice_both_out_data_V_data_V_U_vld_out;

    out_data_TVALID_int_regslice_assign_proc : process(ap_enable_reg_pp0_iter30, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter30 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            out_data_TVALID_int_regslice <= ap_const_logic_1;
        else 
            out_data_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_1_fu_314_p3 <= (ap_const_lv1_1 & trunc_ln315_fu_311_p1);
    p_last_V_fu_204_p1 <= in_data_TLAST_int_regslice;
    r_fu_212_p4 <= in_data_TDATA_int_regslice(23 downto 16);
    reg_fu_254_p1 <= val_reg_556;
    select_ln327_fu_467_p3 <= 
        trunc_ln328_reg_571_pp0_iter28_reg when (and_ln327_fu_462_p2(0) = '1') else 
        select_ln330_1_fu_450_p3;
    select_ln330_1_fu_450_p3 <= 
        ap_const_lv8_0 when (or_ln330_reg_618(0) = '1') else 
        select_ln337_fu_444_p3;
    select_ln330_fu_390_p3 <= 
        trunc_ln331_fu_365_p1 when (and_ln330_fu_384_p2(0) = '1') else 
        ap_const_lv8_0;
    select_ln337_fu_444_p3 <= 
        shl_ln339_fu_439_p2 when (and_ln337_reg_613(0) = '1') else 
        select_ln330_reg_608;
        sext_ln326_fu_432_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_1_reg_603),32));

    sext_ln326cast_fu_435_p1 <= sext_ln326_fu_432_p1(8 - 1 downto 0);
        sext_ln331_fu_352_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_reg_584),32));

    sh_amt_1_fu_331_p2 <= std_logic_vector(unsigned(ap_const_lv12_0) - unsigned(sh_amt_reg_584));
    sh_amt_fu_293_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(zext_ln311_fu_279_p1));
    shl_ln339_fu_439_p2 <= std_logic_vector(shift_left(unsigned(trunc_ln328_reg_571_pp0_iter28_reg),to_integer(unsigned('0' & sext_ln326cast_fu_435_p1(8-1 downto 0)))));
    sub_ln455_fu_474_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(select_ln327_reg_623));
    tmp_fu_336_p4 <= sh_amt_1_fu_331_p2(11 downto 3);
    trunc_ln306_fu_257_p1 <= reg_fu_254_p1(63 - 1 downto 0);
    trunc_ln315_fu_311_p1 <= reg_reg_561(52 - 1 downto 0);
    trunc_ln328_fu_283_p1 <= reg_fu_254_p1(8 - 1 downto 0);
    trunc_ln331_fu_365_p1 <= lshr_ln331_fu_359_p2(8 - 1 downto 0);
    xor_ln323_fu_457_p2 <= (icmp_ln323_reg_577_pp0_iter28_reg xor ap_const_lv1_1);
    xor_ln327_fu_373_p2 <= (or_ln327_fu_369_p2 xor ap_const_lv1_1);
    xor_ln329_fu_403_p2 <= (or_ln329_fu_398_p2 xor ap_const_lv1_1);
    xor_ln330_fu_415_p2 <= (icmp_ln330_fu_326_p2 xor ap_const_lv1_1);
    zext_ln311_fu_279_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_fu_269_p4),12));
    zext_ln320_fu_322_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_1_fu_314_p3),54));
    zext_ln331_fu_355_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln331_fu_352_p1),54));
end behav;
