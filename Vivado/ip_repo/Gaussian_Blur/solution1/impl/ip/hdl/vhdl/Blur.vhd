-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Blur is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    in_data_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
    in_data_TKEEP : IN STD_LOGIC_VECTOR (2 downto 0);
    in_data_TSTRB : IN STD_LOGIC_VECTOR (2 downto 0);
    in_data_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    in_data_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    in_data_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    in_data_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    out_data_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
    out_data_TKEEP : OUT STD_LOGIC_VECTOR (2 downto 0);
    out_data_TSTRB : OUT STD_LOGIC_VECTOR (2 downto 0);
    out_data_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_data_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_data_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_data_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    in_data_TVALID : IN STD_LOGIC;
    in_data_TREADY : OUT STD_LOGIC;
    out_data_TVALID : OUT STD_LOGIC;
    out_data_TREADY : IN STD_LOGIC );
end;


architecture behav of Blur is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "Blur_Blur,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=7.268000,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=45,HLS_SYN_DSP=0,HLS_SYN_FF=8635,HLS_SYN_LUT=10445,HLS_VERSION=2020_2}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_S_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_S_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_logic_0 : STD_LOGIC := '0';

    signal ap_rst_n_inv : STD_LOGIC;
    signal w : STD_LOGIC_VECTOR (31 downto 0);
    signal h : STD_LOGIC_VECTOR (31 downto 0);
    signal Blur_entry9_U0_ap_start : STD_LOGIC;
    signal Blur_entry9_U0_start_full_n : STD_LOGIC;
    signal Blur_entry9_U0_ap_done : STD_LOGIC;
    signal Blur_entry9_U0_ap_continue : STD_LOGIC;
    signal Blur_entry9_U0_ap_idle : STD_LOGIC;
    signal Blur_entry9_U0_ap_ready : STD_LOGIC;
    signal Blur_entry9_U0_start_out : STD_LOGIC;
    signal Blur_entry9_U0_start_write : STD_LOGIC;
    signal Blur_entry9_U0_w_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Blur_entry9_U0_w_out_write : STD_LOGIC;
    signal Blur_entry9_U0_w_out1_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Blur_entry9_U0_w_out1_write : STD_LOGIC;
    signal Blur_entry9_U0_h_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Blur_entry9_U0_h_out_write : STD_LOGIC;
    signal Blur_entry9_U0_h_out2_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Blur_entry9_U0_h_out2_write : STD_LOGIC;
    signal Block_split549_proc_U0_ap_start : STD_LOGIC;
    signal Block_split549_proc_U0_ap_done : STD_LOGIC;
    signal Block_split549_proc_U0_ap_continue : STD_LOGIC;
    signal Block_split549_proc_U0_ap_idle : STD_LOGIC;
    signal Block_split549_proc_U0_ap_ready : STD_LOGIC;
    signal Block_split549_proc_U0_start_out : STD_LOGIC;
    signal Block_split549_proc_U0_start_write : STD_LOGIC;
    signal Block_split549_proc_U0_w_read : STD_LOGIC;
    signal Block_split549_proc_U0_w_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_split549_proc_U0_w_out_write : STD_LOGIC;
    signal Block_split549_proc_U0_vconv_xlim_out_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_split549_proc_U0_vconv_xlim_out_out_write : STD_LOGIC;
    signal Loop_HConvH_proc8_U0_ap_start : STD_LOGIC;
    signal Loop_HConvH_proc8_U0_ap_done : STD_LOGIC;
    signal Loop_HConvH_proc8_U0_ap_continue : STD_LOGIC;
    signal Loop_HConvH_proc8_U0_ap_idle : STD_LOGIC;
    signal Loop_HConvH_proc8_U0_ap_ready : STD_LOGIC;
    signal Loop_HConvH_proc8_U0_h_read : STD_LOGIC;
    signal Loop_HConvH_proc8_U0_w_read : STD_LOGIC;
    signal Loop_HConvH_proc8_U0_in_data_TREADY : STD_LOGIC;
    signal Loop_HConvH_proc8_U0_hconv_din : STD_LOGIC_VECTOR (23 downto 0);
    signal Loop_HConvH_proc8_U0_hconv_write : STD_LOGIC;
    signal Loop_VConvH_proc_U0_ap_start : STD_LOGIC;
    signal Loop_VConvH_proc_U0_ap_done : STD_LOGIC;
    signal Loop_VConvH_proc_U0_ap_continue : STD_LOGIC;
    signal Loop_VConvH_proc_U0_ap_idle : STD_LOGIC;
    signal Loop_VConvH_proc_U0_ap_ready : STD_LOGIC;
    signal Loop_VConvH_proc_U0_h_read : STD_LOGIC;
    signal Loop_VConvH_proc_U0_vconv_xlim_loc_read : STD_LOGIC;
    signal Loop_VConvH_proc_U0_hconv_read : STD_LOGIC;
    signal Loop_VConvH_proc_U0_vconv_din : STD_LOGIC_VECTOR (23 downto 0);
    signal Loop_VConvH_proc_U0_vconv_write : STD_LOGIC;
    signal Loop_VConvH_proc_U0_h_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_VConvH_proc_U0_h_out_write : STD_LOGIC;
    signal Loop_VConvH_proc_U0_vconv_xlim_loc_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_VConvH_proc_U0_vconv_xlim_loc_out_write : STD_LOGIC;
    signal Loop_Border_proc_U0_ap_start : STD_LOGIC;
    signal Loop_Border_proc_U0_ap_done : STD_LOGIC;
    signal Loop_Border_proc_U0_ap_continue : STD_LOGIC;
    signal Loop_Border_proc_U0_ap_idle : STD_LOGIC;
    signal Loop_Border_proc_U0_ap_ready : STD_LOGIC;
    signal Loop_Border_proc_U0_h_read : STD_LOGIC;
    signal Loop_Border_proc_U0_w_read : STD_LOGIC;
    signal Loop_Border_proc_U0_vconv_xlim_loc_read : STD_LOGIC;
    signal Loop_Border_proc_U0_out_data_TDATA : STD_LOGIC_VECTOR (23 downto 0);
    signal Loop_Border_proc_U0_out_data_TVALID : STD_LOGIC;
    signal Loop_Border_proc_U0_out_data_TKEEP : STD_LOGIC_VECTOR (2 downto 0);
    signal Loop_Border_proc_U0_out_data_TSTRB : STD_LOGIC_VECTOR (2 downto 0);
    signal Loop_Border_proc_U0_out_data_TUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Loop_Border_proc_U0_out_data_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal Loop_Border_proc_U0_out_data_TID : STD_LOGIC_VECTOR (0 downto 0);
    signal Loop_Border_proc_U0_out_data_TDEST : STD_LOGIC_VECTOR (0 downto 0);
    signal Loop_Border_proc_U0_vconv_read : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal w_c_full_n : STD_LOGIC;
    signal w_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal w_c_empty_n : STD_LOGIC;
    signal w_c566_full_n : STD_LOGIC;
    signal w_c566_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal w_c566_empty_n : STD_LOGIC;
    signal h_c_full_n : STD_LOGIC;
    signal h_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal h_c_empty_n : STD_LOGIC;
    signal h_c567_full_n : STD_LOGIC;
    signal h_c567_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal h_c567_empty_n : STD_LOGIC;
    signal w_c568_full_n : STD_LOGIC;
    signal w_c568_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal w_c568_empty_n : STD_LOGIC;
    signal vconv_xlim_loc_c_full_n : STD_LOGIC;
    signal vconv_xlim_loc_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal vconv_xlim_loc_c_empty_n : STD_LOGIC;
    signal hconv_full_n : STD_LOGIC;
    signal hconv_dout : STD_LOGIC_VECTOR (23 downto 0);
    signal hconv_empty_n : STD_LOGIC;
    signal vconv_full_n : STD_LOGIC;
    signal vconv_dout : STD_LOGIC_VECTOR (23 downto 0);
    signal vconv_empty_n : STD_LOGIC;
    signal h_c569_full_n : STD_LOGIC;
    signal h_c569_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal h_c569_empty_n : STD_LOGIC;
    signal vconv_xlim_loc_c570_full_n : STD_LOGIC;
    signal vconv_xlim_loc_c570_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal vconv_xlim_loc_c570_empty_n : STD_LOGIC;
    signal start_for_Block_split549_proc_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Block_split549_proc_U0_full_n : STD_LOGIC;
    signal start_for_Block_split549_proc_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Block_split549_proc_U0_empty_n : STD_LOGIC;
    signal start_for_Loop_HConvH_proc8_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Loop_HConvH_proc8_U0_full_n : STD_LOGIC;
    signal start_for_Loop_HConvH_proc8_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Loop_HConvH_proc8_U0_empty_n : STD_LOGIC;
    signal start_for_Loop_VConvH_proc_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Loop_VConvH_proc_U0_full_n : STD_LOGIC;
    signal start_for_Loop_VConvH_proc_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Loop_VConvH_proc_U0_empty_n : STD_LOGIC;
    signal start_for_Loop_Border_proc_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Loop_Border_proc_U0_full_n : STD_LOGIC;
    signal start_for_Loop_Border_proc_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Loop_Border_proc_U0_empty_n : STD_LOGIC;
    signal Loop_HConvH_proc8_U0_start_full_n : STD_LOGIC;
    signal Loop_HConvH_proc8_U0_start_write : STD_LOGIC;
    signal Loop_VConvH_proc_U0_start_full_n : STD_LOGIC;
    signal Loop_VConvH_proc_U0_start_write : STD_LOGIC;
    signal Loop_Border_proc_U0_start_full_n : STD_LOGIC;
    signal Loop_Border_proc_U0_start_write : STD_LOGIC;

    component Blur_Blur_entry9 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        w : IN STD_LOGIC_VECTOR (31 downto 0);
        h : IN STD_LOGIC_VECTOR (31 downto 0);
        w_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        w_out_full_n : IN STD_LOGIC;
        w_out_write : OUT STD_LOGIC;
        w_out1_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        w_out1_full_n : IN STD_LOGIC;
        w_out1_write : OUT STD_LOGIC;
        h_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        h_out_full_n : IN STD_LOGIC;
        h_out_write : OUT STD_LOGIC;
        h_out2_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        h_out2_full_n : IN STD_LOGIC;
        h_out2_write : OUT STD_LOGIC );
    end component;


    component Blur_Block_split549_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        w_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        w_empty_n : IN STD_LOGIC;
        w_read : OUT STD_LOGIC;
        w_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        w_out_full_n : IN STD_LOGIC;
        w_out_write : OUT STD_LOGIC;
        vconv_xlim_out_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        vconv_xlim_out_out_full_n : IN STD_LOGIC;
        vconv_xlim_out_out_write : OUT STD_LOGIC );
    end component;


    component Blur_Loop_HConvH_proc8 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        h_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        h_empty_n : IN STD_LOGIC;
        h_read : OUT STD_LOGIC;
        w_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        w_empty_n : IN STD_LOGIC;
        w_read : OUT STD_LOGIC;
        in_data_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
        in_data_TVALID : IN STD_LOGIC;
        in_data_TREADY : OUT STD_LOGIC;
        in_data_TKEEP : IN STD_LOGIC_VECTOR (2 downto 0);
        in_data_TSTRB : IN STD_LOGIC_VECTOR (2 downto 0);
        in_data_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        in_data_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        in_data_TID : IN STD_LOGIC_VECTOR (0 downto 0);
        in_data_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
        hconv_din : OUT STD_LOGIC_VECTOR (23 downto 0);
        hconv_full_n : IN STD_LOGIC;
        hconv_write : OUT STD_LOGIC );
    end component;


    component Blur_Loop_VConvH_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        h_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        h_empty_n : IN STD_LOGIC;
        h_read : OUT STD_LOGIC;
        vconv_xlim_loc_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        vconv_xlim_loc_empty_n : IN STD_LOGIC;
        vconv_xlim_loc_read : OUT STD_LOGIC;
        hconv_dout : IN STD_LOGIC_VECTOR (23 downto 0);
        hconv_empty_n : IN STD_LOGIC;
        hconv_read : OUT STD_LOGIC;
        vconv_din : OUT STD_LOGIC_VECTOR (23 downto 0);
        vconv_full_n : IN STD_LOGIC;
        vconv_write : OUT STD_LOGIC;
        h_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        h_out_full_n : IN STD_LOGIC;
        h_out_write : OUT STD_LOGIC;
        vconv_xlim_loc_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        vconv_xlim_loc_out_full_n : IN STD_LOGIC;
        vconv_xlim_loc_out_write : OUT STD_LOGIC );
    end component;


    component Blur_Loop_Border_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        h_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        h_empty_n : IN STD_LOGIC;
        h_read : OUT STD_LOGIC;
        w_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        w_empty_n : IN STD_LOGIC;
        w_read : OUT STD_LOGIC;
        vconv_xlim_loc_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        vconv_xlim_loc_empty_n : IN STD_LOGIC;
        vconv_xlim_loc_read : OUT STD_LOGIC;
        out_data_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
        out_data_TVALID : OUT STD_LOGIC;
        out_data_TREADY : IN STD_LOGIC;
        out_data_TKEEP : OUT STD_LOGIC_VECTOR (2 downto 0);
        out_data_TSTRB : OUT STD_LOGIC_VECTOR (2 downto 0);
        out_data_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        out_data_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        out_data_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
        out_data_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
        vconv_dout : IN STD_LOGIC_VECTOR (23 downto 0);
        vconv_empty_n : IN STD_LOGIC;
        vconv_read : OUT STD_LOGIC );
    end component;


    component Blur_fifo_w32_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component Blur_fifo_w32_d3_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component Blur_fifo_w24_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (23 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (23 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component Blur_start_for_Block_split549_proc_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component Blur_start_for_Loop_HConvH_proc8_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component Blur_start_for_Loop_VConvH_proc_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component Blur_start_for_Loop_Border_proc_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component Blur_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        w : OUT STD_LOGIC_VECTOR (31 downto 0);
        h : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    control_s_axi_U : component Blur_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        w => w,
        h => h);

    Blur_entry9_U0 : component Blur_Blur_entry9
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Blur_entry9_U0_ap_start,
        start_full_n => Blur_entry9_U0_start_full_n,
        ap_done => Blur_entry9_U0_ap_done,
        ap_continue => Blur_entry9_U0_ap_continue,
        ap_idle => Blur_entry9_U0_ap_idle,
        ap_ready => Blur_entry9_U0_ap_ready,
        start_out => Blur_entry9_U0_start_out,
        start_write => Blur_entry9_U0_start_write,
        w => w,
        h => h,
        w_out_din => Blur_entry9_U0_w_out_din,
        w_out_full_n => w_c_full_n,
        w_out_write => Blur_entry9_U0_w_out_write,
        w_out1_din => Blur_entry9_U0_w_out1_din,
        w_out1_full_n => w_c566_full_n,
        w_out1_write => Blur_entry9_U0_w_out1_write,
        h_out_din => Blur_entry9_U0_h_out_din,
        h_out_full_n => h_c_full_n,
        h_out_write => Blur_entry9_U0_h_out_write,
        h_out2_din => Blur_entry9_U0_h_out2_din,
        h_out2_full_n => h_c567_full_n,
        h_out2_write => Blur_entry9_U0_h_out2_write);

    Block_split549_proc_U0 : component Blur_Block_split549_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Block_split549_proc_U0_ap_start,
        start_full_n => start_for_Loop_Border_proc_U0_full_n,
        ap_done => Block_split549_proc_U0_ap_done,
        ap_continue => Block_split549_proc_U0_ap_continue,
        ap_idle => Block_split549_proc_U0_ap_idle,
        ap_ready => Block_split549_proc_U0_ap_ready,
        start_out => Block_split549_proc_U0_start_out,
        start_write => Block_split549_proc_U0_start_write,
        w_dout => w_c_dout,
        w_empty_n => w_c_empty_n,
        w_read => Block_split549_proc_U0_w_read,
        w_out_din => Block_split549_proc_U0_w_out_din,
        w_out_full_n => w_c568_full_n,
        w_out_write => Block_split549_proc_U0_w_out_write,
        vconv_xlim_out_out_din => Block_split549_proc_U0_vconv_xlim_out_out_din,
        vconv_xlim_out_out_full_n => vconv_xlim_loc_c_full_n,
        vconv_xlim_out_out_write => Block_split549_proc_U0_vconv_xlim_out_out_write);

    Loop_HConvH_proc8_U0 : component Blur_Loop_HConvH_proc8
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Loop_HConvH_proc8_U0_ap_start,
        ap_done => Loop_HConvH_proc8_U0_ap_done,
        ap_continue => Loop_HConvH_proc8_U0_ap_continue,
        ap_idle => Loop_HConvH_proc8_U0_ap_idle,
        ap_ready => Loop_HConvH_proc8_U0_ap_ready,
        h_dout => h_c_dout,
        h_empty_n => h_c_empty_n,
        h_read => Loop_HConvH_proc8_U0_h_read,
        w_dout => w_c566_dout,
        w_empty_n => w_c566_empty_n,
        w_read => Loop_HConvH_proc8_U0_w_read,
        in_data_TDATA => in_data_TDATA,
        in_data_TVALID => in_data_TVALID,
        in_data_TREADY => Loop_HConvH_proc8_U0_in_data_TREADY,
        in_data_TKEEP => in_data_TKEEP,
        in_data_TSTRB => in_data_TSTRB,
        in_data_TUSER => in_data_TUSER,
        in_data_TLAST => in_data_TLAST,
        in_data_TID => in_data_TID,
        in_data_TDEST => in_data_TDEST,
        hconv_din => Loop_HConvH_proc8_U0_hconv_din,
        hconv_full_n => hconv_full_n,
        hconv_write => Loop_HConvH_proc8_U0_hconv_write);

    Loop_VConvH_proc_U0 : component Blur_Loop_VConvH_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Loop_VConvH_proc_U0_ap_start,
        ap_done => Loop_VConvH_proc_U0_ap_done,
        ap_continue => Loop_VConvH_proc_U0_ap_continue,
        ap_idle => Loop_VConvH_proc_U0_ap_idle,
        ap_ready => Loop_VConvH_proc_U0_ap_ready,
        h_dout => h_c567_dout,
        h_empty_n => h_c567_empty_n,
        h_read => Loop_VConvH_proc_U0_h_read,
        vconv_xlim_loc_dout => vconv_xlim_loc_c_dout,
        vconv_xlim_loc_empty_n => vconv_xlim_loc_c_empty_n,
        vconv_xlim_loc_read => Loop_VConvH_proc_U0_vconv_xlim_loc_read,
        hconv_dout => hconv_dout,
        hconv_empty_n => hconv_empty_n,
        hconv_read => Loop_VConvH_proc_U0_hconv_read,
        vconv_din => Loop_VConvH_proc_U0_vconv_din,
        vconv_full_n => vconv_full_n,
        vconv_write => Loop_VConvH_proc_U0_vconv_write,
        h_out_din => Loop_VConvH_proc_U0_h_out_din,
        h_out_full_n => h_c569_full_n,
        h_out_write => Loop_VConvH_proc_U0_h_out_write,
        vconv_xlim_loc_out_din => Loop_VConvH_proc_U0_vconv_xlim_loc_out_din,
        vconv_xlim_loc_out_full_n => vconv_xlim_loc_c570_full_n,
        vconv_xlim_loc_out_write => Loop_VConvH_proc_U0_vconv_xlim_loc_out_write);

    Loop_Border_proc_U0 : component Blur_Loop_Border_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Loop_Border_proc_U0_ap_start,
        ap_done => Loop_Border_proc_U0_ap_done,
        ap_continue => Loop_Border_proc_U0_ap_continue,
        ap_idle => Loop_Border_proc_U0_ap_idle,
        ap_ready => Loop_Border_proc_U0_ap_ready,
        h_dout => h_c569_dout,
        h_empty_n => h_c569_empty_n,
        h_read => Loop_Border_proc_U0_h_read,
        w_dout => w_c568_dout,
        w_empty_n => w_c568_empty_n,
        w_read => Loop_Border_proc_U0_w_read,
        vconv_xlim_loc_dout => vconv_xlim_loc_c570_dout,
        vconv_xlim_loc_empty_n => vconv_xlim_loc_c570_empty_n,
        vconv_xlim_loc_read => Loop_Border_proc_U0_vconv_xlim_loc_read,
        out_data_TDATA => Loop_Border_proc_U0_out_data_TDATA,
        out_data_TVALID => Loop_Border_proc_U0_out_data_TVALID,
        out_data_TREADY => out_data_TREADY,
        out_data_TKEEP => Loop_Border_proc_U0_out_data_TKEEP,
        out_data_TSTRB => Loop_Border_proc_U0_out_data_TSTRB,
        out_data_TUSER => Loop_Border_proc_U0_out_data_TUSER,
        out_data_TLAST => Loop_Border_proc_U0_out_data_TLAST,
        out_data_TID => Loop_Border_proc_U0_out_data_TID,
        out_data_TDEST => Loop_Border_proc_U0_out_data_TDEST,
        vconv_dout => vconv_dout,
        vconv_empty_n => vconv_empty_n,
        vconv_read => Loop_Border_proc_U0_vconv_read);

    w_c_U : component Blur_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Blur_entry9_U0_w_out_din,
        if_full_n => w_c_full_n,
        if_write => Blur_entry9_U0_w_out_write,
        if_dout => w_c_dout,
        if_empty_n => w_c_empty_n,
        if_read => Block_split549_proc_U0_w_read);

    w_c566_U : component Blur_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Blur_entry9_U0_w_out1_din,
        if_full_n => w_c566_full_n,
        if_write => Blur_entry9_U0_w_out1_write,
        if_dout => w_c566_dout,
        if_empty_n => w_c566_empty_n,
        if_read => Loop_HConvH_proc8_U0_w_read);

    h_c_U : component Blur_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Blur_entry9_U0_h_out_din,
        if_full_n => h_c_full_n,
        if_write => Blur_entry9_U0_h_out_write,
        if_dout => h_c_dout,
        if_empty_n => h_c_empty_n,
        if_read => Loop_HConvH_proc8_U0_h_read);

    h_c567_U : component Blur_fifo_w32_d3_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Blur_entry9_U0_h_out2_din,
        if_full_n => h_c567_full_n,
        if_write => Blur_entry9_U0_h_out2_write,
        if_dout => h_c567_dout,
        if_empty_n => h_c567_empty_n,
        if_read => Loop_VConvH_proc_U0_h_read);

    w_c568_U : component Blur_fifo_w32_d3_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_split549_proc_U0_w_out_din,
        if_full_n => w_c568_full_n,
        if_write => Block_split549_proc_U0_w_out_write,
        if_dout => w_c568_dout,
        if_empty_n => w_c568_empty_n,
        if_read => Loop_Border_proc_U0_w_read);

    vconv_xlim_loc_c_U : component Blur_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_split549_proc_U0_vconv_xlim_out_out_din,
        if_full_n => vconv_xlim_loc_c_full_n,
        if_write => Block_split549_proc_U0_vconv_xlim_out_out_write,
        if_dout => vconv_xlim_loc_c_dout,
        if_empty_n => vconv_xlim_loc_c_empty_n,
        if_read => Loop_VConvH_proc_U0_vconv_xlim_loc_read);

    hconv_U : component Blur_fifo_w24_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Loop_HConvH_proc8_U0_hconv_din,
        if_full_n => hconv_full_n,
        if_write => Loop_HConvH_proc8_U0_hconv_write,
        if_dout => hconv_dout,
        if_empty_n => hconv_empty_n,
        if_read => Loop_VConvH_proc_U0_hconv_read);

    vconv_U : component Blur_fifo_w24_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Loop_VConvH_proc_U0_vconv_din,
        if_full_n => vconv_full_n,
        if_write => Loop_VConvH_proc_U0_vconv_write,
        if_dout => vconv_dout,
        if_empty_n => vconv_empty_n,
        if_read => Loop_Border_proc_U0_vconv_read);

    h_c569_U : component Blur_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Loop_VConvH_proc_U0_h_out_din,
        if_full_n => h_c569_full_n,
        if_write => Loop_VConvH_proc_U0_h_out_write,
        if_dout => h_c569_dout,
        if_empty_n => h_c569_empty_n,
        if_read => Loop_Border_proc_U0_h_read);

    vconv_xlim_loc_c570_U : component Blur_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Loop_VConvH_proc_U0_vconv_xlim_loc_out_din,
        if_full_n => vconv_xlim_loc_c570_full_n,
        if_write => Loop_VConvH_proc_U0_vconv_xlim_loc_out_write,
        if_dout => vconv_xlim_loc_c570_dout,
        if_empty_n => vconv_xlim_loc_c570_empty_n,
        if_read => Loop_Border_proc_U0_vconv_xlim_loc_read);

    start_for_Block_split549_proc_U0_U : component Blur_start_for_Block_split549_proc_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Block_split549_proc_U0_din,
        if_full_n => start_for_Block_split549_proc_U0_full_n,
        if_write => Blur_entry9_U0_start_write,
        if_dout => start_for_Block_split549_proc_U0_dout,
        if_empty_n => start_for_Block_split549_proc_U0_empty_n,
        if_read => Block_split549_proc_U0_ap_ready);

    start_for_Loop_HConvH_proc8_U0_U : component Blur_start_for_Loop_HConvH_proc8_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Loop_HConvH_proc8_U0_din,
        if_full_n => start_for_Loop_HConvH_proc8_U0_full_n,
        if_write => Blur_entry9_U0_start_write,
        if_dout => start_for_Loop_HConvH_proc8_U0_dout,
        if_empty_n => start_for_Loop_HConvH_proc8_U0_empty_n,
        if_read => Loop_HConvH_proc8_U0_ap_ready);

    start_for_Loop_VConvH_proc_U0_U : component Blur_start_for_Loop_VConvH_proc_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Loop_VConvH_proc_U0_din,
        if_full_n => start_for_Loop_VConvH_proc_U0_full_n,
        if_write => Blur_entry9_U0_start_write,
        if_dout => start_for_Loop_VConvH_proc_U0_dout,
        if_empty_n => start_for_Loop_VConvH_proc_U0_empty_n,
        if_read => Loop_VConvH_proc_U0_ap_ready);

    start_for_Loop_Border_proc_U0_U : component Blur_start_for_Loop_Border_proc_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Loop_Border_proc_U0_din,
        if_full_n => start_for_Loop_Border_proc_U0_full_n,
        if_write => Block_split549_proc_U0_start_write,
        if_dout => start_for_Loop_Border_proc_U0_dout,
        if_empty_n => start_for_Loop_Border_proc_U0_empty_n,
        if_read => Loop_Border_proc_U0_ap_ready);




    Block_split549_proc_U0_ap_continue <= ap_const_logic_1;
    Block_split549_proc_U0_ap_start <= start_for_Block_split549_proc_U0_empty_n;
    Blur_entry9_U0_ap_continue <= ap_const_logic_1;
    Blur_entry9_U0_ap_start <= ap_const_logic_1;
    Blur_entry9_U0_start_full_n <= (start_for_Loop_VConvH_proc_U0_full_n and start_for_Loop_HConvH_proc8_U0_full_n and start_for_Block_split549_proc_U0_full_n);
    Loop_Border_proc_U0_ap_continue <= ap_const_logic_1;
    Loop_Border_proc_U0_ap_start <= start_for_Loop_Border_proc_U0_empty_n;
    Loop_Border_proc_U0_start_full_n <= ap_const_logic_1;
    Loop_Border_proc_U0_start_write <= ap_const_logic_0;
    Loop_HConvH_proc8_U0_ap_continue <= ap_const_logic_1;
    Loop_HConvH_proc8_U0_ap_start <= start_for_Loop_HConvH_proc8_U0_empty_n;
    Loop_HConvH_proc8_U0_start_full_n <= ap_const_logic_1;
    Loop_HConvH_proc8_U0_start_write <= ap_const_logic_0;
    Loop_VConvH_proc_U0_ap_continue <= ap_const_logic_1;
    Loop_VConvH_proc_U0_ap_start <= start_for_Loop_VConvH_proc_U0_empty_n;
    Loop_VConvH_proc_U0_start_full_n <= ap_const_logic_1;
    Loop_VConvH_proc_U0_start_write <= ap_const_logic_0;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_continue <= ap_const_logic_0;
    in_data_TREADY <= Loop_HConvH_proc8_U0_in_data_TREADY;
    out_data_TDATA <= Loop_Border_proc_U0_out_data_TDATA;
    out_data_TDEST <= Loop_Border_proc_U0_out_data_TDEST;
    out_data_TID <= Loop_Border_proc_U0_out_data_TID;
    out_data_TKEEP <= Loop_Border_proc_U0_out_data_TKEEP;
    out_data_TLAST <= Loop_Border_proc_U0_out_data_TLAST;
    out_data_TSTRB <= Loop_Border_proc_U0_out_data_TSTRB;
    out_data_TUSER <= Loop_Border_proc_U0_out_data_TUSER;
    out_data_TVALID <= Loop_Border_proc_U0_out_data_TVALID;
    start_for_Block_split549_proc_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_Loop_Border_proc_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_Loop_HConvH_proc8_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_Loop_VConvH_proc_U0_din <= (0=>ap_const_logic_1, others=>'-');
end behav;
