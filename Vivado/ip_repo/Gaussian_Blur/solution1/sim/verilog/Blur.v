// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="Blur_Blur,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.912000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=22,HLS_SYN_DSP=0,HLS_SYN_FF=2033,HLS_SYN_LUT=2072,HLS_VERSION=2020_2}" *)

module Blur (
        ap_clk,
        ap_rst_n,
        in_data_TDATA,
        in_data_TVALID,
        in_data_TREADY,
        in_data_TKEEP,
        in_data_TSTRB,
        in_data_TLAST,
        out_data_TDATA,
        out_data_TVALID,
        out_data_TREADY,
        out_data_TKEEP,
        out_data_TSTRB,
        out_data_TLAST,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_pp0_stage0 = 10'd8;
parameter    ap_ST_fsm_state6 = 10'd16;
parameter    ap_ST_fsm_state7 = 10'd32;
parameter    ap_ST_fsm_pp1_stage0 = 10'd64;
parameter    ap_ST_fsm_state12 = 10'd128;
parameter    ap_ST_fsm_pp2_stage0 = 10'd256;
parameter    ap_ST_fsm_state18 = 10'd512;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [23:0] in_data_TDATA;
input   in_data_TVALID;
output   in_data_TREADY;
input  [2:0] in_data_TKEEP;
input  [2:0] in_data_TSTRB;
input  [0:0] in_data_TLAST;
output  [23:0] out_data_TDATA;
output   out_data_TVALID;
input   out_data_TREADY;
output  [2:0] out_data_TKEEP;
output  [2:0] out_data_TSTRB;
output  [0:0] out_data_TLAST;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] w;
wire   [31:0] h;
wire   [63:0] sigma;
wire   [31:0] kernal;
wire   [11:0] linebuf_0_address0;
reg    linebuf_0_ce0;
reg    linebuf_0_we0;
wire   [11:0] linebuf_0_address1;
reg    linebuf_0_ce1;
wire   [31:0] linebuf_0_q1;
wire   [11:0] linebuf_1_address0;
reg    linebuf_1_ce0;
reg    linebuf_1_we0;
wire   [11:0] linebuf_1_address1;
reg    linebuf_1_ce1;
wire   [31:0] linebuf_1_q1;
reg    in_data_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln54_1_fu_441_p2;
reg    out_data_TDATA_blk_n;
reg    ap_enable_reg_pp2_iter3;
wire    ap_block_pp2_stage0;
reg   [0:0] icmp_ln91_reg_1161;
reg   [0:0] icmp_ln91_reg_1161_pp2_iter2_reg;
reg    ap_enable_reg_pp2_iter4;
reg   [0:0] icmp_ln91_reg_1161_pp2_iter3_reg;
reg   [43:0] indvar_flatten_reg_297;
reg   [11:0] row_reg_308;
reg   [43:0] indvar_flatten7_reg_319;
reg   [11:0] col_reg_330;
reg   [11:0] row_1_reg_342;
reg   [43:0] indvar_flatten18_reg_353;
reg   [11:0] i_reg_364;
reg   [31:0] j_reg_375;
reg   [31:0] h_read_reg_940;
reg   [31:0] w_read_reg_946;
wire   [11:0] empty_fu_386_p1;
reg   [11:0] empty_reg_956;
wire  signed [31:0] vconv_xlim_fu_390_p2;
reg  signed [31:0] vconv_xlim_reg_973;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln54_fu_395_p2;
wire   [43:0] zext_ln54_fu_400_p1;
reg   [43:0] zext_ln54_reg_996;
wire   [43:0] grp_fu_406_p2;
reg   [43:0] mul_ln54_reg_1007;
wire    ap_CS_fsm_state3;
wire   [43:0] add_ln54_fu_412_p2;
reg    ap_block_state4_pp0_stage0_iter0;
wire   [31:0] hconv_din;
wire    hconv_full_n;
reg    hconv_write;
reg   [0:0] icmp_ln65_reg_1032;
reg    ap_block_state5_pp0_stage0_iter1;
reg    ap_enable_reg_pp0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [25:0] hwin_1_cast_fu_424_p1;
reg   [25:0] hwin_1_cast_reg_1018;
wire   [24:0] add_ln63_fu_467_p2;
reg   [24:0] add_ln63_reg_1027;
wire   [0:0] icmp_ln65_fu_483_p2;
wire   [11:0] row_2_fu_494_p2;
wire    ap_CS_fsm_state6;
wire   [43:0] grp_fu_516_p2;
reg   [43:0] mul_ln72_reg_1046;
wire    ap_CS_fsm_state7;
wire   [43:0] add_ln72_fu_521_p2;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_state8_pp1_stage0_iter0;
wire   [31:0] hconv_dout;
wire    hconv_empty_n;
reg    hconv_read;
reg   [0:0] icmp_ln72_reg_1062;
reg    ap_block_state9_pp1_stage0_iter1;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_state10_pp1_stage0_iter2;
wire    vconv_full_n;
reg    vconv_write;
reg   [0:0] select_ln72_1_reg_1098;
reg    ap_block_state11_pp1_stage0_iter3;
reg    ap_enable_reg_pp1_iter3;
reg    ap_block_pp1_stage0_11001;
wire   [0:0] icmp_ln73_fu_531_p2;
reg   [0:0] icmp_ln73_reg_1056;
reg   [0:0] icmp_ln73_reg_1056_pp1_iter1_reg;
wire   [0:0] icmp_ln72_fu_536_p2;
reg   [0:0] icmp_ln72_reg_1062_pp1_iter1_reg;
reg   [0:0] icmp_ln72_reg_1062_pp1_iter2_reg;
reg   [11:0] linebuf_0_addr_reg_1066;
reg   [11:0] linebuf_1_addr_reg_1072;
wire   [11:0] add_ln73_fu_555_p2;
reg   [31:0] tmp_8_reg_1083;
reg   [31:0] linebuf_0_load_reg_1088;
reg   [31:0] linebuf_1_load_reg_1093;
wire   [0:0] select_ln72_1_fu_599_p3;
wire   [11:0] select_ln72_2_fu_606_p3;
reg   [11:0] select_ln72_2_reg_1102;
reg    ap_enable_reg_pp1_iter2;
wire   [31:0] add_ln81_1_fu_617_p2;
reg   [31:0] add_ln81_1_reg_1107;
wire   [11:0] sub68_i_cast_fu_622_p2;
reg   [11:0] sub68_i_cast_reg_1132;
wire    ap_CS_fsm_state12;
wire   [31:0] sub58_i_fu_627_p2;
reg   [31:0] sub58_i_reg_1140;
wire   [31:0] sub55_i_fu_632_p2;
reg   [31:0] sub55_i_reg_1145;
wire  signed [32:0] sext_ln91_fu_637_p1;
reg  signed [32:0] sext_ln91_reg_1150;
wire   [43:0] add_ln91_fu_640_p2;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter0;
wire    ap_block_state13_pp2_stage0_iter0;
wire   [31:0] vconv_dout;
wire    vconv_empty_n;
reg    vconv_read;
reg   [0:0] select_ln91_2_reg_1172;
reg   [0:0] icmp_ln98_reg_1186;
reg    ap_predicate_op185_read_state14;
reg    ap_block_state14_pp2_stage0_iter1;
reg    ap_enable_reg_pp2_iter1;
wire    ap_block_state15_pp2_stage0_iter2;
reg    ap_block_state16_pp2_stage0_iter3;
reg    ap_block_state16_io;
reg    ap_block_state17_pp2_stage0_iter4;
reg    ap_block_state17_io;
reg    ap_block_pp2_stage0_11001;
wire   [0:0] icmp_ln91_fu_690_p2;
reg   [0:0] icmp_ln91_reg_1161_pp2_iter1_reg;
wire   [31:0] select_ln91_fu_700_p3;
reg   [31:0] select_ln91_reg_1165;
reg   [31:0] select_ln91_reg_1165_pp2_iter1_reg;
wire   [0:0] select_ln91_2_fu_766_p3;
reg   [0:0] select_ln91_2_reg_1172_pp2_iter1_reg;
wire   [11:0] select_ln91_3_fu_774_p3;
wire   [11:0] trunc_ln92_fu_782_p1;
reg   [11:0] trunc_ln92_reg_1181;
reg   [11:0] trunc_ln92_reg_1181_pp2_iter1_reg;
wire   [0:0] icmp_ln98_fu_790_p2;
wire   [0:0] icmp_ln105_fu_795_p2;
reg   [0:0] icmp_ln105_reg_1190;
reg   [0:0] icmp_ln105_reg_1190_pp2_iter1_reg;
wire   [0:0] icmp_ln112_fu_800_p2;
reg   [0:0] icmp_ln112_reg_1195;
reg   [0:0] icmp_ln112_reg_1195_pp2_iter1_reg;
reg   [0:0] icmp_ln112_reg_1195_pp2_iter2_reg;
wire   [0:0] pix_out_sidebands_last_V_fu_810_p2;
reg   [0:0] pix_out_sidebands_last_V_reg_1200;
reg   [0:0] pix_out_sidebands_last_V_reg_1200_pp2_iter1_reg;
reg   [0:0] pix_out_sidebands_last_V_reg_1200_pp2_iter2_reg;
wire   [31:0] add_ln92_fu_816_p2;
wire   [0:0] icmp_ln110_fu_884_p2;
reg   [0:0] icmp_ln110_reg_1210;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state4;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state8;
reg    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state13;
reg    ap_enable_reg_pp2_iter2;
wire   [11:0] borderbuf_address0;
reg    borderbuf_ce0;
reg    borderbuf_we0;
wire   [23:0] borderbuf_d0;
wire   [11:0] borderbuf_address1;
reg    borderbuf_ce1;
wire   [23:0] borderbuf_q1;
reg   [11:0] ap_phi_mux_col_phi_fu_334_p4;
wire    ap_block_pp1_stage0;
wire   [63:0] zext_ln73_fu_549_p1;
wire   [63:0] zext_ln92_fu_822_p1;
wire   [63:0] zext_ln115_fu_895_p1;
reg   [23:0] hwin_1_1_fu_154;
reg   [23:0] hwin_1_fu_158;
reg   [31:0] pix_in_fu_162;
reg   [31:0] l_edge_pix_fu_166;
wire   [31:0] l_edge_pix_1_fu_850_p3;
reg   [31:0] r_edge_pix_fu_170;
wire   [31:0] select_ln105_fu_858_p3;
reg    ap_block_pp0_stage0_01001;
reg    ap_block_pp1_stage0_01001;
reg    ap_block_pp2_stage0_01001;
wire   [31:0] grp_fu_406_p0;
wire   [31:0] grp_fu_406_p1;
wire   [31:0] zext_ln55_fu_432_p1;
wire   [0:0] icmp_ln55_fu_436_p2;
wire   [24:0] hwin_1_1_cast_fu_428_p1;
wire   [24:0] zext_ln58_fu_463_p1;
wire   [11:0] select_ln54_fu_451_p3;
wire   [10:0] tmp_fu_473_p4;
wire   [25:0] zext_ln63_fu_500_p1;
wire   [25:0] add_ln63_1_fu_503_p2;
wire   [31:0] grp_fu_516_p0;
wire   [31:0] grp_fu_516_p1;
wire   [31:0] zext_ln73_1_fu_527_p1;
wire   [11:0] select_ln72_fu_541_p3;
wire   [11:0] add_ln72_1_fu_561_p2;
wire   [10:0] tmp_1_fu_567_p4;
wire   [10:0] tmp_2_fu_583_p4;
wire   [0:0] icmp50_fu_577_p2;
wire   [0:0] icmp53_fu_593_p2;
wire   [31:0] add_ln81_fu_613_p2;
wire   [10:0] tmp_4_fu_657_p4;
wire   [0:0] notrhs_fu_673_p2;
wire   [0:0] icmp56_fu_667_p2;
wire   [0:0] cmp45_i_fu_646_p2;
wire   [0:0] brmerge_not_fu_678_p2;
wire   [0:0] icmp_ln92_fu_695_p2;
wire   [11:0] add_ln91_1_fu_708_p2;
wire   [0:0] cmp69_i_mid1_fu_720_p2;
wire   [0:0] cmp69_i_fu_652_p2;
wire   [10:0] tmp_5_fu_733_p4;
wire   [0:0] notrhs_mid1_fu_749_p2;
wire   [0:0] icmp62_fu_743_p2;
wire   [0:0] cmp45_i_mid1_fu_714_p2;
wire   [0:0] brmerge_not_mid1_fu_754_p2;
wire   [0:0] brmerge151_mid1_fu_760_p2;
wire   [0:0] brmerge151_fu_684_p2;
wire   [32:0] zext_ln92_1_fu_786_p1;
wire   [0:0] select_ln91_1_fu_725_p3;
wire   [0:0] icmp_ln121_fu_805_p2;
wire   [0:0] icmp_ln102_fu_845_p2;
wire   [30:0] tmp_7_fu_875_p4;
wire   [11:0] add_ln115_fu_890_p2;
wire   [0:0] xor_ln110_fu_914_p2;
wire   [0:0] and_ln112_fu_919_p2;
wire   [23:0] trunc_ln110_1_fu_910_p1;
wire   [23:0] trunc_ln110_fu_906_p1;
wire   [23:0] select_ln112_fu_924_p3;
wire    ap_CS_fsm_state18;
wire    regslice_both_out_data_V_data_V_U_apdone_blk;
reg   [9:0] ap_NS_fsm;
reg    ap_block_pp0;
reg    ap_block_pp1;
reg    ap_block_pp2;
reg    ap_enable_operation_111;
reg    ap_enable_state8_pp1_iter0_stage0;
reg    ap_enable_operation_117;
reg    ap_enable_state9_pp1_iter1_stage0;
reg    ap_enable_operation_119;
reg    ap_enable_operation_113;
reg    ap_enable_operation_118;
reg    ap_enable_operation_120;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
wire    regslice_both_in_data_V_data_V_U_apdone_blk;
wire   [23:0] in_data_TDATA_int_regslice;
wire    in_data_TVALID_int_regslice;
reg    in_data_TREADY_int_regslice;
wire    regslice_both_in_data_V_data_V_U_ack_in;
wire    regslice_both_in_data_V_keep_V_U_apdone_blk;
wire   [2:0] in_data_TKEEP_int_regslice;
wire    regslice_both_in_data_V_keep_V_U_vld_out;
wire    regslice_both_in_data_V_keep_V_U_ack_in;
wire    regslice_both_in_data_V_strb_V_U_apdone_blk;
wire   [2:0] in_data_TSTRB_int_regslice;
wire    regslice_both_in_data_V_strb_V_U_vld_out;
wire    regslice_both_in_data_V_strb_V_U_ack_in;
wire    regslice_both_in_data_V_last_V_U_apdone_blk;
wire   [0:0] in_data_TLAST_int_regslice;
wire    regslice_both_in_data_V_last_V_U_vld_out;
wire    regslice_both_in_data_V_last_V_U_ack_in;
wire   [23:0] out_data_TDATA_int_regslice;
reg    out_data_TVALID_int_regslice;
wire    out_data_TREADY_int_regslice;
wire    regslice_both_out_data_V_data_V_U_vld_out;
wire    regslice_both_out_data_V_keep_V_U_apdone_blk;
wire    regslice_both_out_data_V_keep_V_U_ack_in_dummy;
wire    regslice_both_out_data_V_keep_V_U_vld_out;
wire    regslice_both_out_data_V_strb_V_U_apdone_blk;
wire    regslice_both_out_data_V_strb_V_U_ack_in_dummy;
wire    regslice_both_out_data_V_strb_V_U_vld_out;
wire    regslice_both_out_data_V_last_V_U_apdone_blk;
wire    regslice_both_out_data_V_last_V_U_ack_in_dummy;
wire    regslice_both_out_data_V_last_V_U_vld_out;
wire   [43:0] grp_fu_406_p00;
wire   [43:0] grp_fu_406_p10;
wire   [43:0] grp_fu_516_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter3 = 1'b0;
#0 ap_enable_reg_pp2_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
end

Blur_linebuf_0 #(
    .DataWidth( 32 ),
    .AddressRange( 3360 ),
    .AddressWidth( 12 ))
linebuf_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(linebuf_0_address0),
    .ce0(linebuf_0_ce0),
    .we0(linebuf_0_we0),
    .d0(linebuf_1_q1),
    .address1(linebuf_0_address1),
    .ce1(linebuf_0_ce1),
    .q1(linebuf_0_q1)
);

Blur_linebuf_0 #(
    .DataWidth( 32 ),
    .AddressRange( 3360 ),
    .AddressWidth( 12 ))
linebuf_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(linebuf_1_address0),
    .ce0(linebuf_1_ce0),
    .we0(linebuf_1_we0),
    .d0(hconv_dout),
    .address1(linebuf_1_address1),
    .ce1(linebuf_1_ce1),
    .q1(linebuf_1_q1)
);

Blur_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .w(w),
    .h(h),
    .sigma(sigma),
    .kernal(kernal),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

Blur_borderbuf #(
    .DataWidth( 24 ),
    .AddressRange( 3358 ),
    .AddressWidth( 12 ))
borderbuf_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(borderbuf_address0),
    .ce0(borderbuf_ce0),
    .we0(borderbuf_we0),
    .d0(borderbuf_d0),
    .address1(borderbuf_address1),
    .ce1(borderbuf_ce1),
    .q1(borderbuf_q1)
);

Blur_mul_32ns_32ns_44_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 44 ))
mul_32ns_32ns_44_2_1_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_406_p0),
    .din1(grp_fu_406_p1),
    .ce(1'b1),
    .dout(grp_fu_406_p2)
);

Blur_mul_32ns_32ns_44_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 44 ))
mul_32ns_32ns_44_2_1_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_516_p0),
    .din1(grp_fu_516_p1),
    .ce(1'b1),
    .dout(grp_fu_516_p2)
);

Blur_fifo_w32_d2_S hconv_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(hconv_din),
    .if_full_n(hconv_full_n),
    .if_write(hconv_write),
    .if_dout(hconv_dout),
    .if_empty_n(hconv_empty_n),
    .if_read(hconv_read)
);

Blur_fifo_w32_d2_S vconv_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(add_ln81_1_reg_1107),
    .if_full_n(vconv_full_n),
    .if_write(vconv_write),
    .if_dout(vconv_dout),
    .if_empty_n(vconv_empty_n),
    .if_read(vconv_read)
);

Blur_regslice_both #(
    .DataWidth( 24 ))
regslice_both_in_data_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in_data_TDATA),
    .vld_in(in_data_TVALID),
    .ack_in(regslice_both_in_data_V_data_V_U_ack_in),
    .data_out(in_data_TDATA_int_regslice),
    .vld_out(in_data_TVALID_int_regslice),
    .ack_out(in_data_TREADY_int_regslice),
    .apdone_blk(regslice_both_in_data_V_data_V_U_apdone_blk)
);

Blur_regslice_both #(
    .DataWidth( 3 ))
regslice_both_in_data_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in_data_TKEEP),
    .vld_in(in_data_TVALID),
    .ack_in(regslice_both_in_data_V_keep_V_U_ack_in),
    .data_out(in_data_TKEEP_int_regslice),
    .vld_out(regslice_both_in_data_V_keep_V_U_vld_out),
    .ack_out(in_data_TREADY_int_regslice),
    .apdone_blk(regslice_both_in_data_V_keep_V_U_apdone_blk)
);

Blur_regslice_both #(
    .DataWidth( 3 ))
regslice_both_in_data_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in_data_TSTRB),
    .vld_in(in_data_TVALID),
    .ack_in(regslice_both_in_data_V_strb_V_U_ack_in),
    .data_out(in_data_TSTRB_int_regslice),
    .vld_out(regslice_both_in_data_V_strb_V_U_vld_out),
    .ack_out(in_data_TREADY_int_regslice),
    .apdone_blk(regslice_both_in_data_V_strb_V_U_apdone_blk)
);

Blur_regslice_both #(
    .DataWidth( 1 ))
regslice_both_in_data_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in_data_TLAST),
    .vld_in(in_data_TVALID),
    .ack_in(regslice_both_in_data_V_last_V_U_ack_in),
    .data_out(in_data_TLAST_int_regslice),
    .vld_out(regslice_both_in_data_V_last_V_U_vld_out),
    .ack_out(in_data_TREADY_int_regslice),
    .apdone_blk(regslice_both_in_data_V_last_V_U_apdone_blk)
);

Blur_regslice_both #(
    .DataWidth( 24 ))
regslice_both_out_data_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(out_data_TDATA_int_regslice),
    .vld_in(out_data_TVALID_int_regslice),
    .ack_in(out_data_TREADY_int_regslice),
    .data_out(out_data_TDATA),
    .vld_out(regslice_both_out_data_V_data_V_U_vld_out),
    .ack_out(out_data_TREADY),
    .apdone_blk(regslice_both_out_data_V_data_V_U_apdone_blk)
);

Blur_regslice_both #(
    .DataWidth( 3 ))
regslice_both_out_data_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(3'd7),
    .vld_in(out_data_TVALID_int_regslice),
    .ack_in(regslice_both_out_data_V_keep_V_U_ack_in_dummy),
    .data_out(out_data_TKEEP),
    .vld_out(regslice_both_out_data_V_keep_V_U_vld_out),
    .ack_out(out_data_TREADY),
    .apdone_blk(regslice_both_out_data_V_keep_V_U_apdone_blk)
);

Blur_regslice_both #(
    .DataWidth( 3 ))
regslice_both_out_data_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(3'd1),
    .vld_in(out_data_TVALID_int_regslice),
    .ack_in(regslice_both_out_data_V_strb_V_U_ack_in_dummy),
    .data_out(out_data_TSTRB),
    .vld_out(regslice_both_out_data_V_strb_V_U_vld_out),
    .ack_out(out_data_TREADY),
    .apdone_blk(regslice_both_out_data_V_strb_V_U_apdone_blk)
);

Blur_regslice_both #(
    .DataWidth( 1 ))
regslice_both_out_data_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(pix_out_sidebands_last_V_reg_1200_pp2_iter2_reg),
    .vld_in(out_data_TVALID_int_regslice),
    .ack_in(regslice_both_out_data_V_last_V_U_ack_in_dummy),
    .data_out(out_data_TLAST),
    .vld_out(regslice_both_out_data_V_last_V_U_vld_out),
    .ack_out(out_data_TREADY),
    .apdone_blk(regslice_both_out_data_V_last_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state4))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state4))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state4);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state8) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state8)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state8);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp1_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state13) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state12)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state13)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state13);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp2_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
        end else if ((1'b1 == ap_CS_fsm_state12)) begin
            ap_enable_reg_pp2_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln72_reg_1062_pp1_iter2_reg == 1'd0) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        col_reg_330 <= select_ln72_2_reg_1102;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        col_reg_330 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln91_fu_690_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        i_reg_364 <= select_ln91_3_fu_774_p3;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        i_reg_364 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln91_fu_690_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        indvar_flatten18_reg_353 <= add_ln91_fu_640_p2;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        indvar_flatten18_reg_353 <= 44'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln72_fu_536_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        indvar_flatten7_reg_319 <= add_ln72_fu_521_p2;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        indvar_flatten7_reg_319 <= 44'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln54_1_fu_441_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_297 <= add_ln54_fu_412_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        indvar_flatten_reg_297 <= 44'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln91_fu_690_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        j_reg_375 <= add_ln92_fu_816_p2;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        j_reg_375 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln72_fu_536_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        row_1_reg_342 <= add_ln73_fu_555_p2;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        row_1_reg_342 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln54_1_fu_441_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        row_reg_308 <= row_2_fu_494_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        row_reg_308 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln54_1_fu_441_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln63_reg_1027 <= add_ln63_fu_467_p2;
        icmp_ln65_reg_1032 <= icmp_ln65_fu_483_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln72_reg_1062_pp1_iter1_reg == 1'd0))) begin
        add_ln81_1_reg_1107 <= add_ln81_1_fu_617_p2;
        select_ln72_1_reg_1098 <= select_ln72_1_fu_599_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        empty_reg_956 <= empty_fu_386_p1;
        h_read_reg_940 <= h;
        w_read_reg_946 <= w;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        hwin_1_1_fu_154 <= hwin_1_fu_158;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        hwin_1_cast_reg_1018[23 : 0] <= hwin_1_cast_fu_424_p1[23 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln54_1_fu_441_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        hwin_1_fu_158 <= in_data_TDATA_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (select_ln91_2_fu_766_p3 == 1'd1) & (icmp_ln91_fu_690_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        icmp_ln105_reg_1190 <= icmp_ln105_fu_795_p2;
        icmp_ln98_reg_1186 <= icmp_ln98_fu_790_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        icmp_ln105_reg_1190_pp2_iter1_reg <= icmp_ln105_reg_1190;
        icmp_ln112_reg_1195_pp2_iter1_reg <= icmp_ln112_reg_1195;
        icmp_ln91_reg_1161 <= icmp_ln91_fu_690_p2;
        icmp_ln91_reg_1161_pp2_iter1_reg <= icmp_ln91_reg_1161;
        pix_out_sidebands_last_V_reg_1200_pp2_iter1_reg <= pix_out_sidebands_last_V_reg_1200;
        select_ln91_2_reg_1172_pp2_iter1_reg <= select_ln91_2_reg_1172;
        select_ln91_reg_1165_pp2_iter1_reg <= select_ln91_reg_1165;
        trunc_ln92_reg_1181_pp2_iter1_reg <= trunc_ln92_reg_1181;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln91_reg_1161_pp2_iter1_reg == 1'd0))) begin
        icmp_ln110_reg_1210 <= icmp_ln110_fu_884_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln91_fu_690_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        icmp_ln112_reg_1195 <= icmp_ln112_fu_800_p2;
        pix_out_sidebands_last_V_reg_1200 <= pix_out_sidebands_last_V_fu_810_p2;
        select_ln91_2_reg_1172 <= select_ln91_2_fu_766_p3;
        select_ln91_reg_1165 <= select_ln91_fu_700_p3;
        trunc_ln92_reg_1181 <= trunc_ln92_fu_782_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp2_stage0_11001)) begin
        icmp_ln112_reg_1195_pp2_iter2_reg <= icmp_ln112_reg_1195_pp2_iter1_reg;
        icmp_ln91_reg_1161_pp2_iter2_reg <= icmp_ln91_reg_1161_pp2_iter1_reg;
        icmp_ln91_reg_1161_pp2_iter3_reg <= icmp_ln91_reg_1161_pp2_iter2_reg;
        pix_out_sidebands_last_V_reg_1200_pp2_iter2_reg <= pix_out_sidebands_last_V_reg_1200_pp2_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln72_reg_1062 <= icmp_ln72_fu_536_p2;
        icmp_ln72_reg_1062_pp1_iter1_reg <= icmp_ln72_reg_1062;
        icmp_ln73_reg_1056 <= icmp_ln73_fu_531_p2;
        icmp_ln73_reg_1056_pp1_iter1_reg <= icmp_ln73_reg_1056;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        icmp_ln72_reg_1062_pp1_iter2_reg <= icmp_ln72_reg_1062_pp1_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter2 == 1'b1) & (select_ln91_2_reg_1172_pp2_iter1_reg == 1'd1))) begin
        l_edge_pix_fu_166 <= l_edge_pix_1_fu_850_p3;
        r_edge_pix_fu_170 <= select_ln105_fu_858_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln72_fu_536_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        linebuf_0_addr_reg_1066 <= zext_ln73_fu_549_p1;
        linebuf_1_addr_reg_1072 <= zext_ln73_fu_549_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln72_reg_1062 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        linebuf_0_load_reg_1088 <= linebuf_0_q1;
        linebuf_1_load_reg_1093 <= linebuf_1_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        mul_ln54_reg_1007 <= grp_fu_406_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        mul_ln72_reg_1046 <= grp_fu_516_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (icmp_ln98_reg_1186 == 1'd1) & (select_ln91_2_reg_1172 == 1'd1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        pix_in_fu_162 <= vconv_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter2 == 1'b1) & (icmp_ln72_reg_1062_pp1_iter1_reg == 1'd0))) begin
        select_ln72_2_reg_1102 <= select_ln72_2_fu_606_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        sext_ln91_reg_1150 <= sext_ln91_fu_637_p1;
        sub55_i_reg_1145 <= sub55_i_fu_632_p2;
        sub58_i_reg_1140 <= sub58_i_fu_627_p2;
        sub68_i_cast_reg_1132 <= sub68_i_cast_fu_622_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln72_reg_1062 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        tmp_8_reg_1083 <= hconv_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        vconv_xlim_reg_973 <= vconv_xlim_fu_390_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln54_fu_395_p2 == 1'd1))) begin
        zext_ln54_reg_996[31 : 0] <= zext_ln54_fu_400_p1[31 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln54_1_fu_441_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln72_fu_536_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state8 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state8 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln91_fu_690_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state13 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state13 = 1'b0;
    end
end

always @ (*) begin
    if (((regslice_both_out_data_V_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state18))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter3 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter4 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (icmp_ln72_reg_1062_pp1_iter2_reg == 1'd0) & (ap_enable_reg_pp1_iter3 == 1'b1))) begin
        ap_phi_mux_col_phi_fu_334_p4 = select_ln72_2_reg_1102;
    end else begin
        ap_phi_mux_col_phi_fu_334_p4 = col_reg_330;
    end
end

always @ (*) begin
    if (((regslice_both_out_data_V_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state18))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        borderbuf_ce0 = 1'b1;
    end else begin
        borderbuf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter2 == 1'b1))) begin
        borderbuf_ce1 = 1'b1;
    end else begin
        borderbuf_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (icmp_ln98_reg_1186 == 1'd1) & (select_ln91_2_reg_1172 == 1'd1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        borderbuf_we0 = 1'b1;
    end else begin
        borderbuf_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln72_reg_1062 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        hconv_read = 1'b1;
    end else begin
        hconv_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln65_reg_1032 == 1'd0))) begin
        hconv_write = 1'b1;
    end else begin
        hconv_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln54_1_fu_441_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_data_TDATA_blk_n = in_data_TVALID_int_regslice;
    end else begin
        in_data_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln54_1_fu_441_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_data_TREADY_int_regslice = 1'b1;
    end else begin
        in_data_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        linebuf_0_ce0 = 1'b1;
    end else begin
        linebuf_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        linebuf_0_ce1 = 1'b1;
    end else begin
        linebuf_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln72_reg_1062 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        linebuf_0_we0 = 1'b1;
    end else begin
        linebuf_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        linebuf_1_ce0 = 1'b1;
    end else begin
        linebuf_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        linebuf_1_ce1 = 1'b1;
    end else begin
        linebuf_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln72_reg_1062 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        linebuf_1_we0 = 1'b1;
    end else begin
        linebuf_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln91_reg_1161_pp2_iter2_reg == 1'd0) & (ap_enable_reg_pp2_iter3 == 1'b1) & (1'b0 == ap_block_pp2_stage0)) | ((1'b0 == ap_block_pp2_stage0) & (icmp_ln91_reg_1161_pp2_iter3_reg == 1'd0) & (ap_enable_reg_pp2_iter4 == 1'b1)))) begin
        out_data_TDATA_blk_n = out_data_TREADY_int_regslice;
    end else begin
        out_data_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln91_reg_1161_pp2_iter2_reg == 1'd0) & (ap_enable_reg_pp2_iter3 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        out_data_TVALID_int_regslice = 1'b1;
    end else begin
        out_data_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter1 == 1'b1) & (ap_predicate_op185_read_state14 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        vconv_read = 1'b1;
    end else begin
        vconv_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter3 == 1'b1) & (select_ln72_1_reg_1098 == 1'd1))) begin
        vconv_write = 1'b1;
    end else begin
        vconv_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln54_fu_395_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((icmp_ln54_1_fu_441_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((icmp_ln54_1_fu_441_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln72_fu_536_p2 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln72_fu_536_p2 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((1'b0 == ap_block_pp2_stage0_subdone) & (icmp_ln91_fu_690_p2 == 1'd1) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b1)) & ~((ap_enable_reg_pp2_iter3 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter4 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((ap_enable_reg_pp2_iter3 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter4 == 1'b1)) | ((1'b0 == ap_block_pp2_stage0_subdone) & (icmp_ln91_fu_690_p2 == 1'd1) & (ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state18 : begin
            if (((regslice_both_out_data_V_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln115_fu_890_p2 = ($signed(trunc_ln92_reg_1181_pp2_iter1_reg) + $signed(12'd4095));

assign add_ln54_fu_412_p2 = (indvar_flatten_reg_297 + 44'd1);

assign add_ln63_1_fu_503_p2 = (zext_ln63_fu_500_p1 + hwin_1_cast_reg_1018);

assign add_ln63_fu_467_p2 = (hwin_1_1_cast_fu_428_p1 + zext_ln58_fu_463_p1);

assign add_ln72_1_fu_561_p2 = (ap_phi_mux_col_phi_fu_334_p4 + 12'd1);

assign add_ln72_fu_521_p2 = (indvar_flatten7_reg_319 + 44'd1);

assign add_ln73_fu_555_p2 = (select_ln72_fu_541_p3 + 12'd1);

assign add_ln81_1_fu_617_p2 = (add_ln81_fu_613_p2 + linebuf_1_load_reg_1093);

assign add_ln81_fu_613_p2 = (linebuf_0_load_reg_1088 + tmp_8_reg_1083);

assign add_ln91_1_fu_708_p2 = (i_reg_364 + 12'd1);

assign add_ln91_fu_640_p2 = (indvar_flatten18_reg_353 + 44'd1);

assign add_ln92_fu_816_p2 = (select_ln91_fu_700_p3 + 32'd1);

assign and_ln112_fu_919_p2 = (xor_ln110_fu_914_p2 & icmp_ln112_reg_1195_pp2_iter2_reg);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd5];

always @ (*) begin
    ap_block_pp0 = ((ap_ST_fsm_pp0_stage0 == ap_CS_fsm) & (1'b1 == ap_block_pp0_stage0_subdone));
end

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln54_1_fu_441_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (in_data_TVALID_int_regslice == 1'b0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln65_reg_1032 == 1'd0) & (hconv_full_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln54_1_fu_441_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (in_data_TVALID_int_regslice == 1'b0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln65_reg_1032 == 1'd0) & (hconv_full_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln54_1_fu_441_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (in_data_TVALID_int_regslice == 1'b0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln65_reg_1032 == 1'd0) & (hconv_full_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp1 = ((ap_ST_fsm_pp1_stage0 == ap_CS_fsm) & (1'b1 == ap_block_pp1_stage0_subdone));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_01001 = (((ap_enable_reg_pp1_iter3 == 1'b1) & (select_ln72_1_reg_1098 == 1'd1) & (vconv_full_n == 1'b0)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln72_reg_1062 == 1'd0) & (hconv_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp1_stage0_11001 = (((ap_enable_reg_pp1_iter3 == 1'b1) & (select_ln72_1_reg_1098 == 1'd1) & (vconv_full_n == 1'b0)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln72_reg_1062 == 1'd0) & (hconv_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = (((ap_enable_reg_pp1_iter3 == 1'b1) & (select_ln72_1_reg_1098 == 1'd1) & (vconv_full_n == 1'b0)) | ((ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln72_reg_1062 == 1'd0) & (hconv_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_pp2 = ((1'b1 == ap_block_pp2_stage0_subdone) & (ap_ST_fsm_pp2_stage0 == ap_CS_fsm));
end

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage0_01001 = (((icmp_ln91_reg_1161_pp2_iter2_reg == 1'd0) & (ap_enable_reg_pp2_iter3 == 1'b1) & (out_data_TREADY_int_regslice == 1'b0)) | ((ap_enable_reg_pp2_iter1 == 1'b1) & (ap_predicate_op185_read_state14 == 1'b1) & (vconv_empty_n == 1'b0)) | ((out_data_TREADY_int_regslice == 1'b0) & (icmp_ln91_reg_1161_pp2_iter3_reg == 1'd0) & (ap_enable_reg_pp2_iter4 == 1'b1)));
end

always @ (*) begin
    ap_block_pp2_stage0_11001 = (((ap_enable_reg_pp2_iter3 == 1'b1) & ((1'b1 == ap_block_state16_io) | ((icmp_ln91_reg_1161_pp2_iter2_reg == 1'd0) & (out_data_TREADY_int_regslice == 1'b0)))) | ((ap_enable_reg_pp2_iter1 == 1'b1) & (ap_predicate_op185_read_state14 == 1'b1) & (vconv_empty_n == 1'b0)) | ((ap_enable_reg_pp2_iter4 == 1'b1) & ((1'b1 == ap_block_state17_io) | ((out_data_TREADY_int_regslice == 1'b0) & (icmp_ln91_reg_1161_pp2_iter3_reg == 1'd0)))));
end

always @ (*) begin
    ap_block_pp2_stage0_subdone = (((ap_enable_reg_pp2_iter3 == 1'b1) & ((1'b1 == ap_block_state16_io) | ((icmp_ln91_reg_1161_pp2_iter2_reg == 1'd0) & (out_data_TREADY_int_regslice == 1'b0)))) | ((ap_enable_reg_pp2_iter1 == 1'b1) & (ap_predicate_op185_read_state14 == 1'b1) & (vconv_empty_n == 1'b0)) | ((ap_enable_reg_pp2_iter4 == 1'b1) & ((1'b1 == ap_block_state17_io) | ((out_data_TREADY_int_regslice == 1'b0) & (icmp_ln91_reg_1161_pp2_iter3_reg == 1'd0)))));
end

assign ap_block_state10_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state11_pp1_stage0_iter3 = ((select_ln72_1_reg_1098 == 1'd1) & (vconv_full_n == 1'b0));
end

assign ap_block_state13_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state14_pp2_stage0_iter1 = ((ap_predicate_op185_read_state14 == 1'b1) & (vconv_empty_n == 1'b0));
end

assign ap_block_state15_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state16_io = ((icmp_ln91_reg_1161_pp2_iter2_reg == 1'd0) & (out_data_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state16_pp2_stage0_iter3 = ((icmp_ln91_reg_1161_pp2_iter2_reg == 1'd0) & (out_data_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state17_io = ((out_data_TREADY_int_regslice == 1'b0) & (icmp_ln91_reg_1161_pp2_iter3_reg == 1'd0));
end

always @ (*) begin
    ap_block_state17_pp2_stage0_iter4 = ((out_data_TREADY_int_regslice == 1'b0) & (icmp_ln91_reg_1161_pp2_iter3_reg == 1'd0));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter0 = ((icmp_ln54_1_fu_441_p2 == 1'd0) & (in_data_TVALID_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state5_pp0_stage0_iter1 = ((icmp_ln65_reg_1032 == 1'd0) & (hconv_full_n == 1'b0));
end

assign ap_block_state8_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state9_pp1_stage0_iter1 = ((icmp_ln72_reg_1062 == 1'd0) & (hconv_empty_n == 1'b0));
end

always @ (*) begin
    ap_enable_operation_111 = (icmp_ln72_fu_536_p2 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_113 = (icmp_ln72_fu_536_p2 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_117 = (icmp_ln72_reg_1062 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_118 = (icmp_ln72_reg_1062 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_119 = (icmp_ln72_reg_1062 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_120 = (icmp_ln72_reg_1062 == 1'd0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

always @ (*) begin
    ap_enable_state8_pp1_iter0_stage0 = ((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0));
end

always @ (*) begin
    ap_enable_state9_pp1_iter1_stage0 = ((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0));
end

always @ (*) begin
    ap_predicate_op185_read_state14 = ((icmp_ln98_reg_1186 == 1'd1) & (select_ln91_2_reg_1172 == 1'd1));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign borderbuf_address0 = zext_ln92_fu_822_p1;

assign borderbuf_address1 = zext_ln115_fu_895_p1;

assign borderbuf_d0 = vconv_dout[23:0];

assign brmerge151_fu_684_p2 = (cmp45_i_fu_646_p2 | brmerge_not_fu_678_p2);

assign brmerge151_mid1_fu_760_p2 = (cmp45_i_mid1_fu_714_p2 | brmerge_not_mid1_fu_754_p2);

assign brmerge_not_fu_678_p2 = (notrhs_fu_673_p2 & icmp56_fu_667_p2);

assign brmerge_not_mid1_fu_754_p2 = (notrhs_mid1_fu_749_p2 & icmp62_fu_743_p2);

assign cmp45_i_fu_646_p2 = ((i_reg_364 == 12'd0) ? 1'b1 : 1'b0);

assign cmp45_i_mid1_fu_714_p2 = ((add_ln91_1_fu_708_p2 == 12'd0) ? 1'b1 : 1'b0);

assign cmp69_i_fu_652_p2 = ((i_reg_364 == sub68_i_cast_reg_1132) ? 1'b1 : 1'b0);

assign cmp69_i_mid1_fu_720_p2 = ((add_ln91_1_fu_708_p2 == sub68_i_cast_reg_1132) ? 1'b1 : 1'b0);

assign empty_fu_386_p1 = h[11:0];

assign grp_fu_406_p0 = grp_fu_406_p00;

assign grp_fu_406_p00 = h_read_reg_940;

assign grp_fu_406_p1 = grp_fu_406_p10;

assign grp_fu_406_p10 = w_read_reg_946;

assign grp_fu_516_p0 = zext_ln54_reg_996;

assign grp_fu_516_p1 = grp_fu_516_p10;

assign grp_fu_516_p10 = $unsigned(vconv_xlim_reg_973);

assign hconv_din = add_ln63_1_fu_503_p2;

assign hwin_1_1_cast_fu_428_p1 = hwin_1_1_fu_154;

assign hwin_1_cast_fu_424_p1 = hwin_1_fu_158;

assign icmp50_fu_577_p2 = ((tmp_1_fu_567_p4 != 11'd0) ? 1'b1 : 1'b0);

assign icmp53_fu_593_p2 = ((tmp_2_fu_583_p4 != 11'd0) ? 1'b1 : 1'b0);

assign icmp56_fu_667_p2 = ((tmp_4_fu_657_p4 != 11'd0) ? 1'b1 : 1'b0);

assign icmp62_fu_743_p2 = ((tmp_5_fu_733_p4 != 11'd0) ? 1'b1 : 1'b0);

assign icmp_ln102_fu_845_p2 = ((select_ln91_reg_1165_pp2_iter1_reg == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln105_fu_795_p2 = ((select_ln91_fu_700_p3 == sub55_i_reg_1145) ? 1'b1 : 1'b0);

assign icmp_ln110_fu_884_p2 = ((tmp_7_fu_875_p4 == 31'd0) ? 1'b1 : 1'b0);

assign icmp_ln112_fu_800_p2 = (($signed(zext_ln92_1_fu_786_p1) < $signed(sext_ln91_reg_1150)) ? 1'b1 : 1'b0);

assign icmp_ln121_fu_805_p2 = ((select_ln91_fu_700_p3 == sub58_i_reg_1140) ? 1'b1 : 1'b0);

assign icmp_ln54_1_fu_441_p2 = ((indvar_flatten_reg_297 == mul_ln54_reg_1007) ? 1'b1 : 1'b0);

assign icmp_ln54_fu_395_p2 = (($signed(h_read_reg_940) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln55_fu_436_p2 = (($signed(zext_ln55_fu_432_p1) < $signed(w_read_reg_946)) ? 1'b1 : 1'b0);

assign icmp_ln65_fu_483_p2 = ((tmp_fu_473_p4 == 11'd0) ? 1'b1 : 1'b0);

assign icmp_ln72_fu_536_p2 = ((indvar_flatten7_reg_319 == mul_ln72_reg_1046) ? 1'b1 : 1'b0);

assign icmp_ln73_fu_531_p2 = ((zext_ln73_1_fu_527_p1 == vconv_xlim_reg_973) ? 1'b1 : 1'b0);

assign icmp_ln91_fu_690_p2 = ((indvar_flatten18_reg_353 == mul_ln54_reg_1007) ? 1'b1 : 1'b0);

assign icmp_ln92_fu_695_p2 = ((j_reg_375 == w_read_reg_946) ? 1'b1 : 1'b0);

assign icmp_ln98_fu_790_p2 = (($signed(zext_ln92_1_fu_786_p1) < $signed(sext_ln91_reg_1150)) ? 1'b1 : 1'b0);

assign in_data_TREADY = regslice_both_in_data_V_data_V_U_ack_in;

assign l_edge_pix_1_fu_850_p3 = ((icmp_ln102_fu_845_p2[0:0] == 1'b1) ? pix_in_fu_162 : l_edge_pix_fu_166);

assign linebuf_0_address0 = linebuf_0_addr_reg_1066;

assign linebuf_0_address1 = zext_ln73_fu_549_p1;

assign linebuf_1_address0 = linebuf_1_addr_reg_1072;

assign linebuf_1_address1 = zext_ln73_fu_549_p1;

assign notrhs_fu_673_p2 = ((i_reg_364 < sub68_i_cast_reg_1132) ? 1'b1 : 1'b0);

assign notrhs_mid1_fu_749_p2 = ((add_ln91_1_fu_708_p2 < sub68_i_cast_reg_1132) ? 1'b1 : 1'b0);

assign out_data_TDATA_int_regslice = ((icmp_ln110_reg_1210[0:0] == 1'b1) ? trunc_ln110_fu_906_p1 : select_ln112_fu_924_p3);

assign out_data_TVALID = regslice_both_out_data_V_data_V_U_vld_out;

assign pix_out_sidebands_last_V_fu_810_p2 = (select_ln91_1_fu_725_p3 & icmp_ln121_fu_805_p2);

assign row_2_fu_494_p2 = (select_ln54_fu_451_p3 + 12'd1);

assign select_ln105_fu_858_p3 = ((icmp_ln105_reg_1190_pp2_iter1_reg[0:0] == 1'b1) ? pix_in_fu_162 : r_edge_pix_fu_170);

assign select_ln112_fu_924_p3 = ((and_ln112_fu_919_p2[0:0] == 1'b1) ? borderbuf_q1 : trunc_ln110_1_fu_910_p1);

assign select_ln54_fu_451_p3 = ((icmp_ln55_fu_436_p2[0:0] == 1'b1) ? row_reg_308 : 12'd0);

assign select_ln72_1_fu_599_p3 = ((icmp_ln73_reg_1056_pp1_iter1_reg[0:0] == 1'b1) ? icmp50_fu_577_p2 : icmp53_fu_593_p2);

assign select_ln72_2_fu_606_p3 = ((icmp_ln73_reg_1056_pp1_iter1_reg[0:0] == 1'b1) ? add_ln72_1_fu_561_p2 : ap_phi_mux_col_phi_fu_334_p4);

assign select_ln72_fu_541_p3 = ((icmp_ln73_fu_531_p2[0:0] == 1'b1) ? 12'd0 : row_1_reg_342);

assign select_ln91_1_fu_725_p3 = ((icmp_ln92_fu_695_p2[0:0] == 1'b1) ? cmp69_i_mid1_fu_720_p2 : cmp69_i_fu_652_p2);

assign select_ln91_2_fu_766_p3 = ((icmp_ln92_fu_695_p2[0:0] == 1'b1) ? brmerge151_mid1_fu_760_p2 : brmerge151_fu_684_p2);

assign select_ln91_3_fu_774_p3 = ((icmp_ln92_fu_695_p2[0:0] == 1'b1) ? add_ln91_1_fu_708_p2 : i_reg_364);

assign select_ln91_fu_700_p3 = ((icmp_ln92_fu_695_p2[0:0] == 1'b1) ? 32'd0 : j_reg_375);

assign sext_ln91_fu_637_p1 = vconv_xlim_reg_973;

assign sub55_i_fu_632_p2 = ($signed(w_read_reg_946) + $signed(32'd4294967293));

assign sub58_i_fu_627_p2 = ($signed(w_read_reg_946) + $signed(32'd4294967295));

assign sub68_i_cast_fu_622_p2 = ($signed(empty_reg_956) + $signed(12'd4095));

assign tmp_1_fu_567_p4 = {{add_ln72_1_fu_561_p2[11:1]}};

assign tmp_2_fu_583_p4 = {{ap_phi_mux_col_phi_fu_334_p4[11:1]}};

assign tmp_4_fu_657_p4 = {{i_reg_364[11:1]}};

assign tmp_5_fu_733_p4 = {{add_ln91_1_fu_708_p2[11:1]}};

assign tmp_7_fu_875_p4 = {{select_ln91_reg_1165_pp2_iter1_reg[31:1]}};

assign tmp_fu_473_p4 = {{select_ln54_fu_451_p3[11:1]}};

assign trunc_ln110_1_fu_910_p1 = r_edge_pix_fu_170[23:0];

assign trunc_ln110_fu_906_p1 = l_edge_pix_fu_166[23:0];

assign trunc_ln92_fu_782_p1 = select_ln91_fu_700_p3[11:0];

assign vconv_xlim_fu_390_p2 = ($signed(w_read_reg_946) + $signed(32'd4294967294));

assign xor_ln110_fu_914_p2 = (icmp_ln110_reg_1210 ^ 1'd1);

assign zext_ln115_fu_895_p1 = add_ln115_fu_890_p2;

assign zext_ln54_fu_400_p1 = h_read_reg_940;

assign zext_ln55_fu_432_p1 = row_reg_308;

assign zext_ln58_fu_463_p1 = in_data_TDATA_int_regslice;

assign zext_ln63_fu_500_p1 = add_ln63_reg_1027;

assign zext_ln73_1_fu_527_p1 = row_1_reg_342;

assign zext_ln73_fu_549_p1 = select_ln72_fu_541_p3;

assign zext_ln92_1_fu_786_p1 = select_ln91_fu_700_p3;

assign zext_ln92_fu_822_p1 = select_ln91_reg_1165;

always @ (posedge ap_clk) begin
    zext_ln54_reg_996[43:32] <= 12'b000000000000;
    hwin_1_cast_reg_1018[25:24] <= 2'b00;
end

endmodule //Blur
