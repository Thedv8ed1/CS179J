// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="Mux_Mux,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.302000,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=102,HLS_SYN_LUT=146,HLS_VERSION=2020_2}" *)

module Mux (
        ap_clk,
        ap_rst_n,
        gray,
        invert,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   gray;
output   invert;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;

reg gray;
reg invert;

 reg    ap_rst_n_inv;
wire   [31:0] filter_setting;
reg   [31:0] filter_setting_0_data_reg;
reg    filter_setting_0_vld_reg;
reg    filter_setting_0_ack_out;
wire   [31:0] grp_read_fu_46_p2;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state2;
reg   [1:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 filter_setting_0_data_reg = 32'd0;
#0 filter_setting_0_vld_reg = 1'b0;
#0 ap_CS_fsm = 2'd1;
end

Mux_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .filter_setting(filter_setting)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((((filter_setting_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (filter_setting_0_vld_reg == 1'b1)) | ((1'b1 == 1'b1) & (filter_setting_0_vld_reg == 1'b0)))) begin
        filter_setting_0_data_reg <= filter_setting;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        filter_setting_0_ack_out = 1'b1;
    end else begin
        filter_setting_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((~(grp_read_fu_46_p2 == 32'd0) & ~(grp_read_fu_46_p2 == 32'd1) & ~(grp_read_fu_46_p2 == 32'd2) & ~(grp_read_fu_46_p2 == 32'd3) & (1'b1 == ap_CS_fsm_state2)) | ((grp_read_fu_46_p2 == 32'd0) & (1'b1 == ap_CS_fsm_state2)) | ((grp_read_fu_46_p2 == 32'd2) & (1'b1 == ap_CS_fsm_state2)))) begin
        gray = 1'd0;
    end else if ((((grp_read_fu_46_p2 == 32'd1) & (1'b1 == ap_CS_fsm_state2)) | ((grp_read_fu_46_p2 == 32'd3) & (1'b1 == ap_CS_fsm_state2)))) begin
        gray = 1'd1;
    end else begin
        gray = 'bx;
    end
end

always @ (*) begin
    if (((~(grp_read_fu_46_p2 == 32'd0) & ~(grp_read_fu_46_p2 == 32'd1) & ~(grp_read_fu_46_p2 == 32'd2) & ~(grp_read_fu_46_p2 == 32'd3) & (1'b1 == ap_CS_fsm_state2)) | ((grp_read_fu_46_p2 == 32'd0) & (1'b1 == ap_CS_fsm_state2)) | ((grp_read_fu_46_p2 == 32'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        invert = 1'd0;
    end else if ((((grp_read_fu_46_p2 == 32'd2) & (1'b1 == ap_CS_fsm_state2)) | ((grp_read_fu_46_p2 == 32'd3) & (1'b1 == ap_CS_fsm_state2)))) begin
        invert = 1'd1;
    end else begin
        invert = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_read_fu_46_p2 = filter_setting_0_data_reg;

endmodule //Mux
