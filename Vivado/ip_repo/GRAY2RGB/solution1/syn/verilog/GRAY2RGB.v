// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="GRAY2RGB_GRAY2RGB,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=0.000000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=5,HLS_SYN_LUT=53,HLS_VERSION=2020_2}" *)

module GRAY2RGB (
        ap_clk,
        ap_rst_n,
        in_data_TDATA,
        in_data_TVALID,
        in_data_TREADY,
        in_data_TKEEP,
        in_data_TSTRB,
        in_data_TUSER,
        in_data_TLAST,
        in_data_TID,
        in_data_TDEST,
        out_data_TDATA,
        out_data_TVALID,
        out_data_TREADY,
        out_data_TKEEP,
        out_data_TSTRB,
        out_data_TUSER,
        out_data_TLAST,
        out_data_TID,
        out_data_TDEST
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state4 = 3'd4;

input   ap_clk;
input   ap_rst_n;
input  [7:0] in_data_TDATA;
input   in_data_TVALID;
output   in_data_TREADY;
input  [0:0] in_data_TKEEP;
input  [0:0] in_data_TSTRB;
input  [0:0] in_data_TUSER;
input  [0:0] in_data_TLAST;
input  [0:0] in_data_TID;
input  [0:0] in_data_TDEST;
output  [23:0] out_data_TDATA;
output   out_data_TVALID;
input   out_data_TREADY;
output  [2:0] out_data_TKEEP;
output  [2:0] out_data_TSTRB;
output  [0:0] out_data_TUSER;
output  [0:0] out_data_TLAST;
output  [0:0] out_data_TID;
output  [0:0] out_data_TDEST;

 reg    ap_rst_n_inv;
reg    in_data_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
reg    out_data_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter1;
wire   [0:0] gray_last_V_fu_122_p1;
reg    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire    ap_CS_fsm_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_block_pp0_stage0_01001;
reg   [2:0] ap_NS_fsm;
wire    ap_CS_fsm_state4;
wire    regslice_both_out_data_V_data_V_U_apdone_blk;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    regslice_both_in_data_V_data_V_U_apdone_blk;
wire   [7:0] in_data_TDATA_int_regslice;
wire    in_data_TVALID_int_regslice;
reg    in_data_TREADY_int_regslice;
wire    regslice_both_in_data_V_data_V_U_ack_in;
wire    regslice_both_in_data_V_keep_V_U_apdone_blk;
wire   [0:0] in_data_TKEEP_int_regslice;
wire    regslice_both_in_data_V_keep_V_U_vld_out;
wire    regslice_both_in_data_V_keep_V_U_ack_in;
wire    regslice_both_in_data_V_strb_V_U_apdone_blk;
wire   [0:0] in_data_TSTRB_int_regslice;
wire    regslice_both_in_data_V_strb_V_U_vld_out;
wire    regslice_both_in_data_V_strb_V_U_ack_in;
wire    regslice_both_in_data_V_user_V_U_apdone_blk;
wire   [0:0] in_data_TUSER_int_regslice;
wire    regslice_both_in_data_V_user_V_U_vld_out;
wire    regslice_both_in_data_V_user_V_U_ack_in;
wire    regslice_both_in_data_V_last_V_U_apdone_blk;
wire   [0:0] in_data_TLAST_int_regslice;
wire    regslice_both_in_data_V_last_V_U_vld_out;
wire    regslice_both_in_data_V_last_V_U_ack_in;
wire    regslice_both_in_data_V_id_V_U_apdone_blk;
wire   [0:0] in_data_TID_int_regslice;
wire    regslice_both_in_data_V_id_V_U_vld_out;
wire    regslice_both_in_data_V_id_V_U_ack_in;
wire    regslice_both_in_data_V_dest_V_U_apdone_blk;
wire   [0:0] in_data_TDEST_int_regslice;
wire    regslice_both_in_data_V_dest_V_U_vld_out;
wire    regslice_both_in_data_V_dest_V_U_ack_in;
wire   [23:0] out_data_TDATA_int_regslice;
reg    out_data_TVALID_int_regslice;
wire    out_data_TREADY_int_regslice;
wire    regslice_both_out_data_V_data_V_U_vld_out;
wire    regslice_both_out_data_V_keep_V_U_apdone_blk;
wire    regslice_both_out_data_V_keep_V_U_ack_in_dummy;
wire    regslice_both_out_data_V_keep_V_U_vld_out;
wire    regslice_both_out_data_V_strb_V_U_apdone_blk;
wire    regslice_both_out_data_V_strb_V_U_ack_in_dummy;
wire    regslice_both_out_data_V_strb_V_U_vld_out;
wire    regslice_both_out_data_V_user_V_U_apdone_blk;
wire    regslice_both_out_data_V_user_V_U_ack_in_dummy;
wire    regslice_both_out_data_V_user_V_U_vld_out;
wire    regslice_both_out_data_V_last_V_U_apdone_blk;
wire    regslice_both_out_data_V_last_V_U_ack_in_dummy;
wire    regslice_both_out_data_V_last_V_U_vld_out;
wire    regslice_both_out_data_V_id_V_U_apdone_blk;
wire    regslice_both_out_data_V_id_V_U_ack_in_dummy;
wire    regslice_both_out_data_V_id_V_U_vld_out;
wire    regslice_both_out_data_V_dest_V_U_apdone_blk;
wire    regslice_both_out_data_V_dest_V_U_ack_in_dummy;
wire    regslice_both_out_data_V_dest_V_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

GRAY2RGB_regslice_both #(
    .DataWidth( 8 ))
regslice_both_in_data_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in_data_TDATA),
    .vld_in(in_data_TVALID),
    .ack_in(regslice_both_in_data_V_data_V_U_ack_in),
    .data_out(in_data_TDATA_int_regslice),
    .vld_out(in_data_TVALID_int_regslice),
    .ack_out(in_data_TREADY_int_regslice),
    .apdone_blk(regslice_both_in_data_V_data_V_U_apdone_blk)
);

GRAY2RGB_regslice_both #(
    .DataWidth( 1 ))
regslice_both_in_data_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in_data_TKEEP),
    .vld_in(in_data_TVALID),
    .ack_in(regslice_both_in_data_V_keep_V_U_ack_in),
    .data_out(in_data_TKEEP_int_regslice),
    .vld_out(regslice_both_in_data_V_keep_V_U_vld_out),
    .ack_out(in_data_TREADY_int_regslice),
    .apdone_blk(regslice_both_in_data_V_keep_V_U_apdone_blk)
);

GRAY2RGB_regslice_both #(
    .DataWidth( 1 ))
regslice_both_in_data_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in_data_TSTRB),
    .vld_in(in_data_TVALID),
    .ack_in(regslice_both_in_data_V_strb_V_U_ack_in),
    .data_out(in_data_TSTRB_int_regslice),
    .vld_out(regslice_both_in_data_V_strb_V_U_vld_out),
    .ack_out(in_data_TREADY_int_regslice),
    .apdone_blk(regslice_both_in_data_V_strb_V_U_apdone_blk)
);

GRAY2RGB_regslice_both #(
    .DataWidth( 1 ))
regslice_both_in_data_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in_data_TUSER),
    .vld_in(in_data_TVALID),
    .ack_in(regslice_both_in_data_V_user_V_U_ack_in),
    .data_out(in_data_TUSER_int_regslice),
    .vld_out(regslice_both_in_data_V_user_V_U_vld_out),
    .ack_out(in_data_TREADY_int_regslice),
    .apdone_blk(regslice_both_in_data_V_user_V_U_apdone_blk)
);

GRAY2RGB_regslice_both #(
    .DataWidth( 1 ))
regslice_both_in_data_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in_data_TLAST),
    .vld_in(in_data_TVALID),
    .ack_in(regslice_both_in_data_V_last_V_U_ack_in),
    .data_out(in_data_TLAST_int_regslice),
    .vld_out(regslice_both_in_data_V_last_V_U_vld_out),
    .ack_out(in_data_TREADY_int_regslice),
    .apdone_blk(regslice_both_in_data_V_last_V_U_apdone_blk)
);

GRAY2RGB_regslice_both #(
    .DataWidth( 1 ))
regslice_both_in_data_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in_data_TID),
    .vld_in(in_data_TVALID),
    .ack_in(regslice_both_in_data_V_id_V_U_ack_in),
    .data_out(in_data_TID_int_regslice),
    .vld_out(regslice_both_in_data_V_id_V_U_vld_out),
    .ack_out(in_data_TREADY_int_regslice),
    .apdone_blk(regslice_both_in_data_V_id_V_U_apdone_blk)
);

GRAY2RGB_regslice_both #(
    .DataWidth( 1 ))
regslice_both_in_data_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in_data_TDEST),
    .vld_in(in_data_TVALID),
    .ack_in(regslice_both_in_data_V_dest_V_U_ack_in),
    .data_out(in_data_TDEST_int_regslice),
    .vld_out(regslice_both_in_data_V_dest_V_U_vld_out),
    .ack_out(in_data_TREADY_int_regslice),
    .apdone_blk(regslice_both_in_data_V_dest_V_U_apdone_blk)
);

GRAY2RGB_regslice_both #(
    .DataWidth( 24 ))
regslice_both_out_data_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(out_data_TDATA_int_regslice),
    .vld_in(out_data_TVALID_int_regslice),
    .ack_in(out_data_TREADY_int_regslice),
    .data_out(out_data_TDATA),
    .vld_out(regslice_both_out_data_V_data_V_U_vld_out),
    .ack_out(out_data_TREADY),
    .apdone_blk(regslice_both_out_data_V_data_V_U_apdone_blk)
);

GRAY2RGB_regslice_both #(
    .DataWidth( 3 ))
regslice_both_out_data_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(3'd7),
    .vld_in(out_data_TVALID_int_regslice),
    .ack_in(regslice_both_out_data_V_keep_V_U_ack_in_dummy),
    .data_out(out_data_TKEEP),
    .vld_out(regslice_both_out_data_V_keep_V_U_vld_out),
    .ack_out(out_data_TREADY),
    .apdone_blk(regslice_both_out_data_V_keep_V_U_apdone_blk)
);

GRAY2RGB_regslice_both #(
    .DataWidth( 3 ))
regslice_both_out_data_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(3'd1),
    .vld_in(out_data_TVALID_int_regslice),
    .ack_in(regslice_both_out_data_V_strb_V_U_ack_in_dummy),
    .data_out(out_data_TSTRB),
    .vld_out(regslice_both_out_data_V_strb_V_U_vld_out),
    .ack_out(out_data_TREADY),
    .apdone_blk(regslice_both_out_data_V_strb_V_U_apdone_blk)
);

GRAY2RGB_regslice_both #(
    .DataWidth( 1 ))
regslice_both_out_data_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(1'd0),
    .vld_in(out_data_TVALID_int_regslice),
    .ack_in(regslice_both_out_data_V_user_V_U_ack_in_dummy),
    .data_out(out_data_TUSER),
    .vld_out(regslice_both_out_data_V_user_V_U_vld_out),
    .ack_out(out_data_TREADY),
    .apdone_blk(regslice_both_out_data_V_user_V_U_apdone_blk)
);

GRAY2RGB_regslice_both #(
    .DataWidth( 1 ))
regslice_both_out_data_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in_data_TLAST_int_regslice),
    .vld_in(out_data_TVALID_int_regslice),
    .ack_in(regslice_both_out_data_V_last_V_U_ack_in_dummy),
    .data_out(out_data_TLAST),
    .vld_out(regslice_both_out_data_V_last_V_U_vld_out),
    .ack_out(out_data_TREADY),
    .apdone_blk(regslice_both_out_data_V_last_V_U_apdone_blk)
);

GRAY2RGB_regslice_both #(
    .DataWidth( 1 ))
regslice_both_out_data_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(1'd0),
    .vld_in(out_data_TVALID_int_regslice),
    .ack_in(regslice_both_out_data_V_id_V_U_ack_in_dummy),
    .data_out(out_data_TID),
    .vld_out(regslice_both_out_data_V_id_V_U_vld_out),
    .ack_out(out_data_TREADY),
    .apdone_blk(regslice_both_out_data_V_id_V_U_apdone_blk)
);

GRAY2RGB_regslice_both #(
    .DataWidth( 1 ))
regslice_both_out_data_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(1'd0),
    .vld_in(out_data_TVALID_int_regslice),
    .ack_in(regslice_both_out_data_V_dest_V_U_ack_in_dummy),
    .data_out(out_data_TDEST),
    .vld_out(regslice_both_out_data_V_dest_V_U_vld_out),
    .ack_out(out_data_TREADY),
    .apdone_blk(regslice_both_out_data_V_dest_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state1)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b1 == ap_CS_fsm_state1)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (*) begin
    if (((gray_last_V_fu_122_p1 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_data_TDATA_blk_n = in_data_TVALID_int_regslice;
    end else begin
        in_data_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_data_TREADY_int_regslice = 1'b1;
    end else begin
        in_data_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        out_data_TDATA_blk_n = out_data_TREADY_int_regslice;
    end else begin
        out_data_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_data_TVALID_int_regslice = 1'b1;
    end else begin
        out_data_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (regslice_both_out_data_V_data_V_U_apdone_blk == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (out_data_TREADY_int_regslice == 1'b0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & ((out_data_TREADY_int_regslice == 1'b0) | (in_data_TVALID_int_regslice == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (out_data_TREADY_int_regslice == 1'b0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & ((out_data_TREADY_int_regslice == 1'b0) | (in_data_TVALID_int_regslice == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & (out_data_TREADY_int_regslice == 1'b0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & ((out_data_TREADY_int_regslice == 1'b0) | (in_data_TVALID_int_regslice == 1'b0))));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter0 = ((out_data_TREADY_int_regslice == 1'b0) | (in_data_TVALID_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = (out_data_TREADY_int_regslice == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign gray_last_V_fu_122_p1 = in_data_TLAST_int_regslice;

assign in_data_TREADY = regslice_both_in_data_V_data_V_U_ack_in;

assign out_data_TDATA_int_regslice = {{{in_data_TDATA_int_regslice}, {in_data_TDATA_int_regslice}}, {in_data_TDATA_int_regslice}};

assign out_data_TVALID = regslice_both_out_data_V_data_V_U_vld_out;

endmodule //GRAY2RGB
