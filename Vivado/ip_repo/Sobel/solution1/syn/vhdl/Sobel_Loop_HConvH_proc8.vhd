-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Sobel_Loop_HConvH_proc8 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    h_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    h_empty_n : IN STD_LOGIC;
    h_read : OUT STD_LOGIC;
    w_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    w_empty_n : IN STD_LOGIC;
    w_read : OUT STD_LOGIC;
    in_data_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    in_data_TVALID : IN STD_LOGIC;
    in_data_TREADY : OUT STD_LOGIC;
    in_data_TKEEP : IN STD_LOGIC_VECTOR (0 downto 0);
    in_data_TSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
    in_data_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    in_data_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    in_data_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    in_data_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    hconv_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    hconv_full_n : IN STD_LOGIC;
    hconv_write : OUT STD_LOGIC );
end;


architecture behav of Sobel_Loop_HConvH_proc8 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal h_blk_n : STD_LOGIC;
    signal w_blk_n : STD_LOGIC;
    signal in_data_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln41_fu_166_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal hconv_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal icmp_ln51_reg_251 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_reg_117 : STD_LOGIC_VECTOR (63 downto 0);
    signal row_reg_128 : STD_LOGIC_VECTOR (10 downto 0);
    signal h_read_reg_211 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_read_reg_216 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_fu_145_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal bound_reg_232 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln41_fu_151_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state4_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal sub_ln213_fu_183_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln213_reg_246 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln51_fu_199_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal row_1_fu_205_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state4 : STD_LOGIC;
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal grp_fu_145_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_145_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln42_fu_157_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln42_fu_161_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln41_fu_171_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_fu_189_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal regslice_both_in_data_V_data_V_U_apdone_blk : STD_LOGIC;
    signal in_data_TDATA_int_regslice : STD_LOGIC_VECTOR (7 downto 0);
    signal in_data_TVALID_int_regslice : STD_LOGIC;
    signal in_data_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_in_data_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_data_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal in_data_TKEEP_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_in_data_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in_data_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_data_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal in_data_TSTRB_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_in_data_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in_data_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_data_V_user_V_U_apdone_blk : STD_LOGIC;
    signal in_data_TUSER_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_in_data_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in_data_V_user_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_data_V_last_V_U_apdone_blk : STD_LOGIC;
    signal in_data_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_in_data_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in_data_V_last_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_data_V_id_V_U_apdone_blk : STD_LOGIC;
    signal in_data_TID_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_in_data_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in_data_V_id_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_data_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal in_data_TDEST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_in_data_V_dest_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in_data_V_dest_V_U_ack_in : STD_LOGIC;
    signal grp_fu_145_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_145_p10 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component Sobel_mul_32ns_32ns_64_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component Sobel_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    mul_32ns_32ns_64_2_1_U10 : component Sobel_mul_32ns_32ns_64_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_145_p0,
        din1 => grp_fu_145_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_145_p2);

    regslice_both_in_data_V_data_V_U : component Sobel_regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => in_data_TDATA,
        vld_in => in_data_TVALID,
        ack_in => regslice_both_in_data_V_data_V_U_ack_in,
        data_out => in_data_TDATA_int_regslice,
        vld_out => in_data_TVALID_int_regslice,
        ack_out => in_data_TREADY_int_regslice,
        apdone_blk => regslice_both_in_data_V_data_V_U_apdone_blk);

    regslice_both_in_data_V_keep_V_U : component Sobel_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => in_data_TKEEP,
        vld_in => in_data_TVALID,
        ack_in => regslice_both_in_data_V_keep_V_U_ack_in,
        data_out => in_data_TKEEP_int_regslice,
        vld_out => regslice_both_in_data_V_keep_V_U_vld_out,
        ack_out => in_data_TREADY_int_regslice,
        apdone_blk => regslice_both_in_data_V_keep_V_U_apdone_blk);

    regslice_both_in_data_V_strb_V_U : component Sobel_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => in_data_TSTRB,
        vld_in => in_data_TVALID,
        ack_in => regslice_both_in_data_V_strb_V_U_ack_in,
        data_out => in_data_TSTRB_int_regslice,
        vld_out => regslice_both_in_data_V_strb_V_U_vld_out,
        ack_out => in_data_TREADY_int_regslice,
        apdone_blk => regslice_both_in_data_V_strb_V_U_apdone_blk);

    regslice_both_in_data_V_user_V_U : component Sobel_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => in_data_TUSER,
        vld_in => in_data_TVALID,
        ack_in => regslice_both_in_data_V_user_V_U_ack_in,
        data_out => in_data_TUSER_int_regslice,
        vld_out => regslice_both_in_data_V_user_V_U_vld_out,
        ack_out => in_data_TREADY_int_regslice,
        apdone_blk => regslice_both_in_data_V_user_V_U_apdone_blk);

    regslice_both_in_data_V_last_V_U : component Sobel_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => in_data_TLAST,
        vld_in => in_data_TVALID,
        ack_in => regslice_both_in_data_V_last_V_U_ack_in,
        data_out => in_data_TLAST_int_regslice,
        vld_out => regslice_both_in_data_V_last_V_U_vld_out,
        ack_out => in_data_TREADY_int_regslice,
        apdone_blk => regslice_both_in_data_V_last_V_U_apdone_blk);

    regslice_both_in_data_V_id_V_U : component Sobel_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => in_data_TID,
        vld_in => in_data_TVALID,
        ack_in => regslice_both_in_data_V_id_V_U_ack_in,
        data_out => in_data_TID_int_regslice,
        vld_out => regslice_both_in_data_V_id_V_U_vld_out,
        ack_out => in_data_TREADY_int_regslice,
        apdone_blk => regslice_both_in_data_V_id_V_U_apdone_blk);

    regslice_both_in_data_V_dest_V_U : component Sobel_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => in_data_TDEST,
        vld_in => in_data_TVALID,
        ack_in => regslice_both_in_data_V_dest_V_U_ack_in,
        data_out => in_data_TDEST_int_regslice,
        vld_out => regslice_both_in_data_V_dest_V_U_vld_out,
        ack_out => in_data_TREADY_int_regslice,
        apdone_blk => regslice_both_in_data_V_dest_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state4);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_reg_117_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln41_fu_166_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_117 <= add_ln41_fu_151_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                indvar_flatten_reg_117 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    row_reg_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln41_fu_166_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                row_reg_128 <= row_1_fu_205_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                row_reg_128 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                bound_reg_232 <= grp_fu_145_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                h_read_reg_211 <= h_dout;
                w_read_reg_216 <= w_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln41_fu_166_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln51_reg_251 <= icmp_ln51_fu_199_p2;
                sub_ln213_reg_246 <= sub_ln213_fu_183_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, h_empty_n, w_empty_n, ap_enable_reg_pp0_iter0, icmp_ln41_fu_166_p2, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((w_empty_n = ap_const_logic_0) or (h_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((icmp_ln41_fu_166_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((icmp_ln41_fu_166_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    add_ln41_fu_151_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_117) + unsigned(ap_const_lv64_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state6 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(hconv_full_n, ap_enable_reg_pp0_iter0, icmp_ln41_fu_166_p2, ap_enable_reg_pp0_iter1, icmp_ln51_reg_251, in_data_TVALID_int_regslice)
    begin
                ap_block_pp0_stage0_01001 <= (((icmp_ln51_reg_251 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (hconv_full_n = ap_const_logic_0)) or ((icmp_ln41_fu_166_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (in_data_TVALID_int_regslice = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(hconv_full_n, ap_enable_reg_pp0_iter0, icmp_ln41_fu_166_p2, ap_enable_reg_pp0_iter1, icmp_ln51_reg_251, in_data_TVALID_int_regslice)
    begin
                ap_block_pp0_stage0_11001 <= (((icmp_ln51_reg_251 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (hconv_full_n = ap_const_logic_0)) or ((icmp_ln41_fu_166_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (in_data_TVALID_int_regslice = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(hconv_full_n, ap_enable_reg_pp0_iter0, icmp_ln41_fu_166_p2, ap_enable_reg_pp0_iter1, icmp_ln51_reg_251, in_data_TVALID_int_regslice)
    begin
                ap_block_pp0_stage0_subdone <= (((icmp_ln51_reg_251 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (hconv_full_n = ap_const_logic_0)) or ((icmp_ln41_fu_166_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (in_data_TVALID_int_regslice = ap_const_logic_0)));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, h_empty_n, w_empty_n)
    begin
                ap_block_state1 <= ((w_empty_n = ap_const_logic_0) or (h_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_block_state4_pp0_stage0_iter0_assign_proc : process(icmp_ln41_fu_166_p2, in_data_TVALID_int_regslice)
    begin
                ap_block_state4_pp0_stage0_iter0 <= ((icmp_ln41_fu_166_p2 = ap_const_lv1_0) and (in_data_TVALID_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state5_pp0_stage0_iter1_assign_proc : process(hconv_full_n, icmp_ln51_reg_251)
    begin
                ap_block_state5_pp0_stage0_iter1 <= ((icmp_ln51_reg_251 = ap_const_lv1_0) and (hconv_full_n = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state4_assign_proc : process(icmp_ln41_fu_166_p2)
    begin
        if ((icmp_ln41_fu_166_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_145_p0 <= grp_fu_145_p00(32 - 1 downto 0);
    grp_fu_145_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_read_reg_211),64));
    grp_fu_145_p1 <= grp_fu_145_p10(32 - 1 downto 0);
    grp_fu_145_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_read_reg_216),64));

    h_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, h_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            h_blk_n <= h_empty_n;
        else 
            h_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    h_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, h_empty_n, w_empty_n)
    begin
        if ((not(((w_empty_n = ap_const_logic_0) or (h_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            h_read <= ap_const_logic_1;
        else 
            h_read <= ap_const_logic_0;
        end if; 
    end process;


    hconv_blk_n_assign_proc : process(hconv_full_n, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln51_reg_251)
    begin
        if (((icmp_ln51_reg_251 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            hconv_blk_n <= hconv_full_n;
        else 
            hconv_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    hconv_din <= sub_ln213_reg_246;

    hconv_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln51_reg_251, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln51_reg_251 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            hconv_write <= ap_const_logic_1;
        else 
            hconv_write <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln41_fu_166_p2 <= "1" when (indvar_flatten_reg_117 = bound_reg_232) else "0";
    icmp_ln42_fu_161_p2 <= "1" when (signed(zext_ln42_fu_157_p1) < signed(w_read_reg_216)) else "0";
    icmp_ln51_fu_199_p2 <= "1" when (tmp_fu_189_p4 = ap_const_lv10_0) else "0";

    in_data_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, icmp_ln41_fu_166_p2, in_data_TVALID_int_regslice)
    begin
        if (((icmp_ln41_fu_166_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_data_TDATA_blk_n <= in_data_TVALID_int_regslice;
        else 
            in_data_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in_data_TREADY <= regslice_both_in_data_V_data_V_U_ack_in;

    in_data_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, icmp_ln41_fu_166_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln41_fu_166_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_data_TREADY_int_regslice <= ap_const_logic_1;
        else 
            in_data_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    row_1_fu_205_p2 <= std_logic_vector(unsigned(select_ln41_fu_171_p3) + unsigned(ap_const_lv11_1));
    select_ln41_fu_171_p3 <= 
        row_reg_128 when (icmp_ln42_fu_161_p2(0) = '1') else 
        ap_const_lv11_0;
    sub_ln213_fu_183_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(in_data_TDATA_int_regslice));
    tmp_fu_189_p4 <= select_ln41_fu_171_p3(10 downto 1);

    w_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, w_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            w_blk_n <= w_empty_n;
        else 
            w_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    w_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, h_empty_n, w_empty_n)
    begin
        if ((not(((w_empty_n = ap_const_logic_0) or (h_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            w_read <= ap_const_logic_1;
        else 
            w_read <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln42_fu_157_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row_reg_128),32));
end behav;
