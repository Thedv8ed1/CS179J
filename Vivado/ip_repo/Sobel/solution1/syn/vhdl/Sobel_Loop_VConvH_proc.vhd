-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Sobel_Loop_VConvH_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    h_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    h_empty_n : IN STD_LOGIC;
    h_read : OUT STD_LOGIC;
    vconv_xlim_loc_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    vconv_xlim_loc_empty_n : IN STD_LOGIC;
    vconv_xlim_loc_read : OUT STD_LOGIC;
    hconv_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    hconv_empty_n : IN STD_LOGIC;
    hconv_read : OUT STD_LOGIC;
    vconv_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    vconv_full_n : IN STD_LOGIC;
    vconv_write : OUT STD_LOGIC;
    h_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    h_out_full_n : IN STD_LOGIC;
    h_out_write : OUT STD_LOGIC;
    vconv_xlim_loc_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    vconv_xlim_loc_out_full_n : IN STD_LOGIC;
    vconv_xlim_loc_out_write : OUT STD_LOGIC );
end;


architecture behav of Sobel_Loop_VConvH_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal linebuf_V_1_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal linebuf_V_1_ce0 : STD_LOGIC;
    signal linebuf_V_1_we0 : STD_LOGIC;
    signal linebuf_V_1_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal linebuf_V_1_ce1 : STD_LOGIC;
    signal linebuf_V_1_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal linebuf_V_0_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal linebuf_V_0_ce0 : STD_LOGIC;
    signal linebuf_V_0_we0 : STD_LOGIC;
    signal h_blk_n : STD_LOGIC;
    signal vconv_xlim_loc_blk_n : STD_LOGIC;
    signal hconv_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln57_reg_307 : STD_LOGIC_VECTOR (0 downto 0);
    signal vconv_blk_n : STD_LOGIC;
    signal select_ln57_1_reg_311 : STD_LOGIC_VECTOR (0 downto 0);
    signal h_out_blk_n : STD_LOGIC;
    signal vconv_xlim_loc_out_blk_n : STD_LOGIC;
    signal indvar_flatten_reg_142 : STD_LOGIC_VECTOR (63 downto 0);
    signal col_reg_153 : STD_LOGIC_VECTOR (10 downto 0);
    signal row_reg_164 : STD_LOGIC_VECTOR (31 downto 0);
    signal h_read_reg_276 : STD_LOGIC_VECTOR (31 downto 0);
    signal vconv_xlim_loc_read_reg_281 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_fu_181_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal bound_reg_297 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln57_fu_187_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state4_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln57_fu_193_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln57_1_fu_249_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln57_2_fu_257_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln58_fu_265_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln58_reg_320 : STD_LOGIC_VECTOR (63 downto 0);
    signal linebuf_V_1_addr_reg_325 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln58_fu_270_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state4 : STD_LOGIC;
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal grp_fu_181_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_181_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln58_fu_198_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln57_1_fu_211_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_fu_217_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_1_fu_233_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_fu_227_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp18_fu_243_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln57_fu_203_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0 : BOOLEAN;
    signal ap_enable_operation_41 : BOOLEAN;
    signal ap_enable_state4_pp0_iter0_stage0 : BOOLEAN;
    signal ap_enable_operation_50 : BOOLEAN;
    signal ap_enable_state5_pp0_iter1_stage0 : BOOLEAN;
    signal ap_enable_operation_52 : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_181_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_181_p10 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component Sobel_mul_32ns_32ns_64_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component Sobel_Loop_VConvH_proc_linebuf_V_1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component Sobel_Loop_VConvH_proc_linebuf_V_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    linebuf_V_1_U : component Sobel_Loop_VConvH_proc_linebuf_V_1
    generic map (
        DataWidth => 8,
        AddressRange => 1920,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => linebuf_V_1_address0,
        ce0 => linebuf_V_1_ce0,
        we0 => linebuf_V_1_we0,
        d0 => hconv_dout,
        address1 => linebuf_V_1_address1,
        ce1 => linebuf_V_1_ce1,
        q1 => linebuf_V_1_q1);

    linebuf_V_0_U : component Sobel_Loop_VConvH_proc_linebuf_V_0
    generic map (
        DataWidth => 8,
        AddressRange => 1920,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => linebuf_V_0_address0,
        ce0 => linebuf_V_0_ce0,
        we0 => linebuf_V_0_we0,
        d0 => linebuf_V_1_q1);

    mul_32ns_32ns_64_2_1_U29 : component Sobel_mul_32ns_32ns_64_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_181_p0,
        din1 => grp_fu_181_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_181_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state4);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    col_reg_153_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln57_fu_193_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                col_reg_153 <= select_ln57_2_fu_257_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                col_reg_153 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_142_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln57_fu_193_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                indvar_flatten_reg_142 <= add_ln57_fu_187_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                indvar_flatten_reg_142 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    row_reg_164_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln57_fu_193_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                row_reg_164 <= add_ln58_fu_270_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                row_reg_164 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                bound_reg_297 <= grp_fu_181_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                h_read_reg_276 <= h_dout;
                vconv_xlim_loc_read_reg_281 <= vconv_xlim_loc_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln57_reg_307 <= icmp_ln57_fu_193_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln57_fu_193_p2 = ap_const_lv1_0))) then
                linebuf_V_1_addr_reg_325 <= zext_ln58_fu_265_p1(11 - 1 downto 0);
                select_ln57_1_reg_311 <= select_ln57_1_fu_249_p3;
                    zext_ln58_reg_320(31 downto 0) <= zext_ln58_fu_265_p1(31 downto 0);
            end if;
        end if;
    end process;
    zext_ln58_reg_320(63 downto 32) <= "00000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, h_empty_n, vconv_xlim_loc_empty_n, h_out_full_n, vconv_xlim_loc_out_full_n, ap_enable_reg_pp0_iter0, icmp_ln57_fu_193_p2, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((vconv_xlim_loc_out_full_n = ap_const_logic_0) or (h_out_full_n = ap_const_logic_0) or (vconv_xlim_loc_empty_n = ap_const_logic_0) or (h_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln57_fu_193_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln57_fu_193_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    add_ln57_1_fu_211_p2 <= std_logic_vector(unsigned(col_reg_153) + unsigned(ap_const_lv11_1));
    add_ln57_fu_187_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_142) + unsigned(ap_const_lv64_1));
    add_ln58_fu_270_p2 <= std_logic_vector(unsigned(select_ln57_fu_203_p3) + unsigned(ap_const_lv32_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state6 <= ap_CS_fsm(4);

    ap_block_pp0_assign_proc : process(ap_CS_fsm, ap_block_pp0_stage0_subdone)
    begin
                ap_block_pp0 <= ((ap_ST_fsm_pp0_stage0 = ap_CS_fsm) and (ap_const_boolean_1 = ap_block_pp0_stage0_subdone));
    end process;

        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(hconv_empty_n, vconv_full_n, ap_enable_reg_pp0_iter1, icmp_ln57_reg_307, select_ln57_1_reg_311)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((select_ln57_1_reg_311 = ap_const_lv1_1) and (vconv_full_n = ap_const_logic_0)) or ((icmp_ln57_reg_307 = ap_const_lv1_0) and (hconv_empty_n = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(hconv_empty_n, vconv_full_n, ap_enable_reg_pp0_iter1, icmp_ln57_reg_307, select_ln57_1_reg_311)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((select_ln57_1_reg_311 = ap_const_lv1_1) and (vconv_full_n = ap_const_logic_0)) or ((icmp_ln57_reg_307 = ap_const_lv1_0) and (hconv_empty_n = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(hconv_empty_n, vconv_full_n, ap_enable_reg_pp0_iter1, icmp_ln57_reg_307, select_ln57_1_reg_311)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((select_ln57_1_reg_311 = ap_const_lv1_1) and (vconv_full_n = ap_const_logic_0)) or ((icmp_ln57_reg_307 = ap_const_lv1_0) and (hconv_empty_n = ap_const_logic_0))));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, h_empty_n, vconv_xlim_loc_empty_n, h_out_full_n, vconv_xlim_loc_out_full_n)
    begin
                ap_block_state1 <= ((vconv_xlim_loc_out_full_n = ap_const_logic_0) or (h_out_full_n = ap_const_logic_0) or (vconv_xlim_loc_empty_n = ap_const_logic_0) or (h_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;

        ap_block_state4_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_pp0_stage0_iter1_assign_proc : process(hconv_empty_n, vconv_full_n, icmp_ln57_reg_307, select_ln57_1_reg_311)
    begin
                ap_block_state5_pp0_stage0_iter1 <= (((select_ln57_1_reg_311 = ap_const_lv1_1) and (vconv_full_n = ap_const_logic_0)) or ((icmp_ln57_reg_307 = ap_const_lv1_0) and (hconv_empty_n = ap_const_logic_0)));
    end process;


    ap_condition_pp0_exit_iter0_state4_assign_proc : process(icmp_ln57_fu_193_p2)
    begin
        if ((icmp_ln57_fu_193_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_enable_operation_41_assign_proc : process(icmp_ln57_fu_193_p2)
    begin
                ap_enable_operation_41 <= (icmp_ln57_fu_193_p2 = ap_const_lv1_0);
    end process;


    ap_enable_operation_50_assign_proc : process(icmp_ln57_reg_307)
    begin
                ap_enable_operation_50 <= (icmp_ln57_reg_307 = ap_const_lv1_0);
    end process;


    ap_enable_operation_52_assign_proc : process(icmp_ln57_reg_307)
    begin
                ap_enable_operation_52 <= (icmp_ln57_reg_307 = ap_const_lv1_0);
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_state4_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0)
    begin
                ap_enable_state4_pp0_iter0_stage0 <= ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_enable_state5_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1)
    begin
                ap_enable_state5_pp0_iter1_stage0 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_181_p0 <= grp_fu_181_p00(32 - 1 downto 0);
    grp_fu_181_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_read_reg_276),64));
    grp_fu_181_p1 <= grp_fu_181_p10(32 - 1 downto 0);
    grp_fu_181_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(vconv_xlim_loc_read_reg_281),64));

    h_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, h_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            h_blk_n <= h_empty_n;
        else 
            h_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    h_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, h_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            h_out_blk_n <= h_out_full_n;
        else 
            h_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    h_out_din <= h_dout;

    h_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, h_empty_n, vconv_xlim_loc_empty_n, h_out_full_n, vconv_xlim_loc_out_full_n)
    begin
        if ((not(((vconv_xlim_loc_out_full_n = ap_const_logic_0) or (h_out_full_n = ap_const_logic_0) or (vconv_xlim_loc_empty_n = ap_const_logic_0) or (h_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            h_out_write <= ap_const_logic_1;
        else 
            h_out_write <= ap_const_logic_0;
        end if; 
    end process;


    h_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, h_empty_n, vconv_xlim_loc_empty_n, h_out_full_n, vconv_xlim_loc_out_full_n)
    begin
        if ((not(((vconv_xlim_loc_out_full_n = ap_const_logic_0) or (h_out_full_n = ap_const_logic_0) or (vconv_xlim_loc_empty_n = ap_const_logic_0) or (h_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            h_read <= ap_const_logic_1;
        else 
            h_read <= ap_const_logic_0;
        end if; 
    end process;


    hconv_blk_n_assign_proc : process(hconv_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln57_reg_307)
    begin
        if (((icmp_ln57_reg_307 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            hconv_blk_n <= hconv_empty_n;
        else 
            hconv_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    hconv_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln57_reg_307, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln57_reg_307 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            hconv_read <= ap_const_logic_1;
        else 
            hconv_read <= ap_const_logic_0;
        end if; 
    end process;

    icmp18_fu_243_p2 <= "0" when (tmp_1_fu_233_p4 = ap_const_lv10_0) else "1";
    icmp_fu_227_p2 <= "0" when (tmp_fu_217_p4 = ap_const_lv10_0) else "1";
    icmp_ln57_fu_193_p2 <= "1" when (indvar_flatten_reg_142 = bound_reg_297) else "0";
    icmp_ln58_fu_198_p2 <= "1" when (row_reg_164 = vconv_xlim_loc_read_reg_281) else "0";
    linebuf_V_0_address0 <= zext_ln58_reg_320(11 - 1 downto 0);

    linebuf_V_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            linebuf_V_0_ce0 <= ap_const_logic_1;
        else 
            linebuf_V_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    linebuf_V_0_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln57_reg_307, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln57_reg_307 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            linebuf_V_0_we0 <= ap_const_logic_1;
        else 
            linebuf_V_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    linebuf_V_1_address0 <= linebuf_V_1_addr_reg_325;
    linebuf_V_1_address1 <= zext_ln58_fu_265_p1(11 - 1 downto 0);

    linebuf_V_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            linebuf_V_1_ce0 <= ap_const_logic_1;
        else 
            linebuf_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    linebuf_V_1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            linebuf_V_1_ce1 <= ap_const_logic_1;
        else 
            linebuf_V_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    linebuf_V_1_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln57_reg_307, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln57_reg_307 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            linebuf_V_1_we0 <= ap_const_logic_1;
        else 
            linebuf_V_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln57_1_fu_249_p3 <= 
        icmp_fu_227_p2 when (icmp_ln58_fu_198_p2(0) = '1') else 
        icmp18_fu_243_p2;
    select_ln57_2_fu_257_p3 <= 
        add_ln57_1_fu_211_p2 when (icmp_ln58_fu_198_p2(0) = '1') else 
        col_reg_153;
    select_ln57_fu_203_p3 <= 
        ap_const_lv32_0 when (icmp_ln58_fu_198_p2(0) = '1') else 
        row_reg_164;
    tmp_1_fu_233_p4 <= col_reg_153(10 downto 1);
    tmp_fu_217_p4 <= add_ln57_1_fu_211_p2(10 downto 1);

    vconv_blk_n_assign_proc : process(vconv_full_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, select_ln57_1_reg_311)
    begin
        if (((select_ln57_1_reg_311 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            vconv_blk_n <= vconv_full_n;
        else 
            vconv_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    vconv_din <= hconv_dout;

    vconv_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, select_ln57_1_reg_311, ap_block_pp0_stage0_11001)
    begin
        if (((select_ln57_1_reg_311 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            vconv_write <= ap_const_logic_1;
        else 
            vconv_write <= ap_const_logic_0;
        end if; 
    end process;


    vconv_xlim_loc_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, vconv_xlim_loc_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            vconv_xlim_loc_blk_n <= vconv_xlim_loc_empty_n;
        else 
            vconv_xlim_loc_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    vconv_xlim_loc_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, vconv_xlim_loc_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            vconv_xlim_loc_out_blk_n <= vconv_xlim_loc_out_full_n;
        else 
            vconv_xlim_loc_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    vconv_xlim_loc_out_din <= vconv_xlim_loc_dout;

    vconv_xlim_loc_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, h_empty_n, vconv_xlim_loc_empty_n, h_out_full_n, vconv_xlim_loc_out_full_n)
    begin
        if ((not(((vconv_xlim_loc_out_full_n = ap_const_logic_0) or (h_out_full_n = ap_const_logic_0) or (vconv_xlim_loc_empty_n = ap_const_logic_0) or (h_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            vconv_xlim_loc_out_write <= ap_const_logic_1;
        else 
            vconv_xlim_loc_out_write <= ap_const_logic_0;
        end if; 
    end process;


    vconv_xlim_loc_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, h_empty_n, vconv_xlim_loc_empty_n, h_out_full_n, vconv_xlim_loc_out_full_n)
    begin
        if ((not(((vconv_xlim_loc_out_full_n = ap_const_logic_0) or (h_out_full_n = ap_const_logic_0) or (vconv_xlim_loc_empty_n = ap_const_logic_0) or (h_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            vconv_xlim_loc_read <= ap_const_logic_1;
        else 
            vconv_xlim_loc_read <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln58_fu_265_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln57_fu_203_p3),64));
end behav;
