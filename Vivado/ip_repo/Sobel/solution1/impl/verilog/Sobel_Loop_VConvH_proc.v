// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Sobel_Loop_VConvH_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        h_dout,
        h_empty_n,
        h_read,
        vconv_xlim_loc_dout,
        vconv_xlim_loc_empty_n,
        vconv_xlim_loc_read,
        hconv_dout,
        hconv_empty_n,
        hconv_read,
        vconv_din,
        vconv_full_n,
        vconv_write,
        h_out_din,
        h_out_full_n,
        h_out_write,
        vconv_xlim_loc_out_din,
        vconv_xlim_loc_out_full_n,
        vconv_xlim_loc_out_write
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_pp0_stage0 = 5'd8;
parameter    ap_ST_fsm_state6 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] h_dout;
input   h_empty_n;
output   h_read;
input  [31:0] vconv_xlim_loc_dout;
input   vconv_xlim_loc_empty_n;
output   vconv_xlim_loc_read;
input  [7:0] hconv_dout;
input   hconv_empty_n;
output   hconv_read;
output  [7:0] vconv_din;
input   vconv_full_n;
output   vconv_write;
output  [31:0] h_out_din;
input   h_out_full_n;
output   h_out_write;
output  [31:0] vconv_xlim_loc_out_din;
input   vconv_xlim_loc_out_full_n;
output   vconv_xlim_loc_out_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg h_read;
reg vconv_xlim_loc_read;
reg hconv_read;
reg vconv_write;
reg h_out_write;
reg vconv_xlim_loc_out_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [10:0] linebuf_V_1_address0;
reg    linebuf_V_1_ce0;
reg    linebuf_V_1_we0;
wire   [10:0] linebuf_V_1_address1;
reg    linebuf_V_1_ce1;
wire   [7:0] linebuf_V_1_q1;
wire   [10:0] linebuf_V_0_address0;
reg    linebuf_V_0_ce0;
reg    linebuf_V_0_we0;
reg    h_blk_n;
reg    vconv_xlim_loc_blk_n;
reg    hconv_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln57_reg_307;
reg    vconv_blk_n;
reg   [0:0] select_ln57_1_reg_311;
reg    h_out_blk_n;
reg    vconv_xlim_loc_out_blk_n;
reg   [63:0] indvar_flatten_reg_142;
reg   [10:0] col_reg_153;
reg   [31:0] row_reg_164;
reg   [31:0] h_read_reg_276;
reg   [31:0] vconv_xlim_loc_read_reg_281;
wire    ap_CS_fsm_state2;
wire   [63:0] grp_fu_181_p2;
reg   [63:0] bound_reg_297;
wire    ap_CS_fsm_state3;
wire   [63:0] add_ln57_fu_187_p2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state4_pp0_stage0_iter0;
reg    ap_block_state5_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln57_fu_193_p2;
wire   [0:0] select_ln57_1_fu_249_p3;
wire   [10:0] select_ln57_2_fu_257_p3;
wire   [63:0] zext_ln58_fu_265_p1;
reg   [63:0] zext_ln58_reg_320;
reg   [10:0] linebuf_V_1_addr_reg_325;
wire   [31:0] add_ln58_fu_270_p2;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state4;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] grp_fu_181_p0;
wire   [31:0] grp_fu_181_p1;
wire   [0:0] icmp_ln58_fu_198_p2;
wire   [10:0] add_ln57_1_fu_211_p2;
wire   [9:0] tmp_fu_217_p4;
wire   [9:0] tmp_1_fu_233_p4;
wire   [0:0] icmp_fu_227_p2;
wire   [0:0] icmp18_fu_243_p2;
wire   [31:0] select_ln57_fu_203_p3;
wire    ap_CS_fsm_state6;
reg   [4:0] ap_NS_fsm;
reg    ap_block_pp0;
reg    ap_enable_operation_41;
reg    ap_enable_state4_pp0_iter0_stage0;
reg    ap_enable_operation_50;
reg    ap_enable_state5_pp0_iter1_stage0;
reg    ap_enable_operation_52;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [63:0] grp_fu_181_p00;
wire   [63:0] grp_fu_181_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

Sobel_Loop_VConvH_proc_linebuf_V_1 #(
    .DataWidth( 8 ),
    .AddressRange( 1920 ),
    .AddressWidth( 11 ))
linebuf_V_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(linebuf_V_1_address0),
    .ce0(linebuf_V_1_ce0),
    .we0(linebuf_V_1_we0),
    .d0(hconv_dout),
    .address1(linebuf_V_1_address1),
    .ce1(linebuf_V_1_ce1),
    .q1(linebuf_V_1_q1)
);

Sobel_Loop_VConvH_proc_linebuf_V_0 #(
    .DataWidth( 8 ),
    .AddressRange( 1920 ),
    .AddressWidth( 11 ))
linebuf_V_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(linebuf_V_0_address0),
    .ce0(linebuf_V_0_ce0),
    .we0(linebuf_V_0_we0),
    .d0(linebuf_V_1_q1)
);

Sobel_mul_32ns_32ns_64_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
mul_32ns_32ns_64_2_1_U29(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_181_p0),
    .din1(grp_fu_181_p1),
    .ce(1'b1),
    .dout(grp_fu_181_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state4))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state4))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state4);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln57_fu_193_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        col_reg_153 <= select_ln57_2_fu_257_p3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        col_reg_153 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln57_fu_193_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        indvar_flatten_reg_142 <= add_ln57_fu_187_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        indvar_flatten_reg_142 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln57_fu_193_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        row_reg_164 <= add_ln58_fu_270_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        row_reg_164 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        bound_reg_297 <= grp_fu_181_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        h_read_reg_276 <= h_dout;
        vconv_xlim_loc_read_reg_281 <= vconv_xlim_loc_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln57_reg_307 <= icmp_ln57_fu_193_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln57_fu_193_p2 == 1'd0))) begin
        linebuf_V_1_addr_reg_325 <= zext_ln58_fu_265_p1;
        select_ln57_1_reg_311 <= select_ln57_1_fu_249_p3;
        zext_ln58_reg_320[31 : 0] <= zext_ln58_fu_265_p1[31 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln57_fu_193_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        h_blk_n = h_empty_n;
    end else begin
        h_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        h_out_blk_n = h_out_full_n;
    end else begin
        h_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((vconv_xlim_loc_out_full_n == 1'b0) | (h_out_full_n == 1'b0) | (vconv_xlim_loc_empty_n == 1'b0) | (h_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        h_out_write = 1'b1;
    end else begin
        h_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((vconv_xlim_loc_out_full_n == 1'b0) | (h_out_full_n == 1'b0) | (vconv_xlim_loc_empty_n == 1'b0) | (h_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        h_read = 1'b1;
    end else begin
        h_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln57_reg_307 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        hconv_blk_n = hconv_empty_n;
    end else begin
        hconv_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln57_reg_307 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        hconv_read = 1'b1;
    end else begin
        hconv_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        linebuf_V_0_ce0 = 1'b1;
    end else begin
        linebuf_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln57_reg_307 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        linebuf_V_0_we0 = 1'b1;
    end else begin
        linebuf_V_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        linebuf_V_1_ce0 = 1'b1;
    end else begin
        linebuf_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        linebuf_V_1_ce1 = 1'b1;
    end else begin
        linebuf_V_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln57_reg_307 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        linebuf_V_1_we0 = 1'b1;
    end else begin
        linebuf_V_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((select_ln57_1_reg_311 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        vconv_blk_n = vconv_full_n;
    end else begin
        vconv_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((select_ln57_1_reg_311 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        vconv_write = 1'b1;
    end else begin
        vconv_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        vconv_xlim_loc_blk_n = vconv_xlim_loc_empty_n;
    end else begin
        vconv_xlim_loc_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        vconv_xlim_loc_out_blk_n = vconv_xlim_loc_out_full_n;
    end else begin
        vconv_xlim_loc_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((vconv_xlim_loc_out_full_n == 1'b0) | (h_out_full_n == 1'b0) | (vconv_xlim_loc_empty_n == 1'b0) | (h_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        vconv_xlim_loc_out_write = 1'b1;
    end else begin
        vconv_xlim_loc_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((vconv_xlim_loc_out_full_n == 1'b0) | (h_out_full_n == 1'b0) | (vconv_xlim_loc_empty_n == 1'b0) | (h_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        vconv_xlim_loc_read = 1'b1;
    end else begin
        vconv_xlim_loc_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((vconv_xlim_loc_out_full_n == 1'b0) | (h_out_full_n == 1'b0) | (vconv_xlim_loc_empty_n == 1'b0) | (h_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln57_fu_193_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln57_fu_193_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln57_1_fu_211_p2 = (col_reg_153 + 11'd1);

assign add_ln57_fu_187_p2 = (indvar_flatten_reg_142 + 64'd1);

assign add_ln58_fu_270_p2 = (select_ln57_fu_203_p3 + 32'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_block_pp0 = ((ap_ST_fsm_pp0_stage0 == ap_CS_fsm) & (1'b1 == ap_block_pp0_stage0_subdone));
end

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((select_ln57_1_reg_311 == 1'd1) & (vconv_full_n == 1'b0)) | ((icmp_ln57_reg_307 == 1'd0) & (hconv_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((select_ln57_1_reg_311 == 1'd1) & (vconv_full_n == 1'b0)) | ((icmp_ln57_reg_307 == 1'd0) & (hconv_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((select_ln57_1_reg_311 == 1'd1) & (vconv_full_n == 1'b0)) | ((icmp_ln57_reg_307 == 1'd0) & (hconv_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_state1 = ((vconv_xlim_loc_out_full_n == 1'b0) | (h_out_full_n == 1'b0) | (vconv_xlim_loc_empty_n == 1'b0) | (h_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_pp0_stage0_iter1 = (((select_ln57_1_reg_311 == 1'd1) & (vconv_full_n == 1'b0)) | ((icmp_ln57_reg_307 == 1'd0) & (hconv_empty_n == 1'b0)));
end

always @ (*) begin
    ap_enable_operation_41 = (icmp_ln57_fu_193_p2 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_50 = (icmp_ln57_reg_307 == 1'd0);
end

always @ (*) begin
    ap_enable_operation_52 = (icmp_ln57_reg_307 == 1'd0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_enable_state4_pp0_iter0_stage0 = ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_enable_state5_pp0_iter1_stage0 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign grp_fu_181_p0 = grp_fu_181_p00;

assign grp_fu_181_p00 = h_read_reg_276;

assign grp_fu_181_p1 = grp_fu_181_p10;

assign grp_fu_181_p10 = vconv_xlim_loc_read_reg_281;

assign h_out_din = h_dout;

assign icmp18_fu_243_p2 = ((tmp_1_fu_233_p4 != 10'd0) ? 1'b1 : 1'b0);

assign icmp_fu_227_p2 = ((tmp_fu_217_p4 != 10'd0) ? 1'b1 : 1'b0);

assign icmp_ln57_fu_193_p2 = ((indvar_flatten_reg_142 == bound_reg_297) ? 1'b1 : 1'b0);

assign icmp_ln58_fu_198_p2 = ((row_reg_164 == vconv_xlim_loc_read_reg_281) ? 1'b1 : 1'b0);

assign linebuf_V_0_address0 = zext_ln58_reg_320;

assign linebuf_V_1_address0 = linebuf_V_1_addr_reg_325;

assign linebuf_V_1_address1 = zext_ln58_fu_265_p1;

assign select_ln57_1_fu_249_p3 = ((icmp_ln58_fu_198_p2[0:0] == 1'b1) ? icmp_fu_227_p2 : icmp18_fu_243_p2);

assign select_ln57_2_fu_257_p3 = ((icmp_ln58_fu_198_p2[0:0] == 1'b1) ? add_ln57_1_fu_211_p2 : col_reg_153);

assign select_ln57_fu_203_p3 = ((icmp_ln58_fu_198_p2[0:0] == 1'b1) ? 32'd0 : row_reg_164);

assign tmp_1_fu_233_p4 = {{col_reg_153[10:1]}};

assign tmp_fu_217_p4 = {{add_ln57_1_fu_211_p2[10:1]}};

assign vconv_din = hconv_dout;

assign vconv_xlim_loc_out_din = vconv_xlim_loc_dout;

assign zext_ln58_fu_265_p1 = select_ln57_fu_203_p3;

always @ (posedge ap_clk) begin
    zext_ln58_reg_320[63:32] <= 32'b00000000000000000000000000000000;
end

endmodule //Sobel_Loop_VConvH_proc
