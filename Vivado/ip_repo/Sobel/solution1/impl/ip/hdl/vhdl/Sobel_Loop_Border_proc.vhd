-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Sobel_Loop_Border_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    h_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    h_empty_n : IN STD_LOGIC;
    h_read : OUT STD_LOGIC;
    w_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    w_empty_n : IN STD_LOGIC;
    w_read : OUT STD_LOGIC;
    vconv_xlim_loc_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    vconv_xlim_loc_empty_n : IN STD_LOGIC;
    vconv_xlim_loc_read : OUT STD_LOGIC;
    out_data_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_data_TVALID : OUT STD_LOGIC;
    out_data_TREADY : IN STD_LOGIC;
    out_data_TKEEP : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_data_TSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_data_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_data_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_data_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_data_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    vconv_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    vconv_empty_n : IN STD_LOGIC;
    vconv_read : OUT STD_LOGIC );
end;


architecture behav of Sobel_Loop_Border_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_FFFFFFFD : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111101";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal h_blk_n : STD_LOGIC;
    signal w_blk_n : STD_LOGIC;
    signal vconv_xlim_loc_blk_n : STD_LOGIC;
    signal out_data_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln76_reg_625 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_reg_625_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal icmp_ln76_reg_625_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal vconv_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal select_ln76_2_reg_636 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln81_reg_650 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_reg_184 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_reg_195 : STD_LOGIC_VECTOR (10 downto 0);
    signal j_reg_206 : STD_LOGIC_VECTOR (31 downto 0);
    signal h_read_reg_562 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_read_reg_568 : STD_LOGIC_VECTOR (31 downto 0);
    signal vconv_xlim_loc_read_reg_576 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal sub85_i_i_i_fu_229_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub85_i_i_i_reg_591 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal sub75_i_i_i_fu_234_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub75_i_i_i_reg_599 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub72_i_i_i_fu_239_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub72_i_i_i_reg_604 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln74_fu_244_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln74_reg_609 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_223_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal bound_reg_615 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln76_fu_247_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state4_pp0_stage0_iter0 : BOOLEAN;
    signal ap_predicate_op81_read_state5 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state7_io : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state8_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln76_fu_301_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_reg_625_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln76_fu_321_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln76_reg_629 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln76_reg_629_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln76_2_fu_381_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln76_2_reg_636_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln76_3_fu_389_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln75_fu_401_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln75_reg_645 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln75_reg_645_pp0_iter1_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln81_fu_405_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_fu_410_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_reg_654 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_reg_654_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln92_fu_415_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln92_reg_659 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln92_reg_659_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln92_reg_659_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal output_last_V_fu_425_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_last_V_reg_664 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_last_V_reg_664_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal output_last_V_reg_664_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln75_fu_431_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln90_fu_494_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln90_reg_674 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state4 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal borderbuf_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal borderbuf_V_ce0 : STD_LOGIC;
    signal borderbuf_V_we0 : STD_LOGIC;
    signal borderbuf_V_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal borderbuf_V_ce1 : STD_LOGIC;
    signal borderbuf_V_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln75_1_fu_437_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln95_fu_505_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal pix_in_fu_90 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_edge_pix_fu_94 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln87_fu_468_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal l_edge_pix_fu_98 : STD_LOGIC_VECTOR (7 downto 0);
    signal l_edge_pix_1_fu_460_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal grp_fu_223_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_223_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln76_1_fu_253_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_268_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal notrhs_i_i_fu_284_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp20_fu_278_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp63_i_i_i_fu_257_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_not_i_i_fu_289_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln74_fu_306_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln75_fu_316_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln76_fu_312_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal cmp86_i_i_i_mid1_fu_335_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp86_i_i_i_fu_263_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_348_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal notrhs_i_i_mid1_fu_364_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_fu_358_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp63_i_i_i_mid1_fu_329_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_not_i_i_mid1_fu_369_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge237_i_i_mid1_fu_375_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge237_i_i_fu_295_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln75_fu_397_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal select_ln76_1_fu_340_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln100_fu_420_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_fu_455_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_485_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln95_fu_500_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal xor_ln90_fu_516_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln92_fu_521_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln92_fu_526_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal regslice_both_out_data_V_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal out_data_TDATA_int_regslice : STD_LOGIC_VECTOR (7 downto 0);
    signal out_data_TVALID_int_regslice : STD_LOGIC;
    signal out_data_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_out_data_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out_data_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out_data_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_data_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out_data_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out_data_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_data_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out_data_V_user_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out_data_V_user_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_data_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out_data_V_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out_data_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_data_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out_data_V_id_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out_data_V_id_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_data_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out_data_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out_data_V_dest_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_data_V_dest_V_U_vld_out : STD_LOGIC;
    signal grp_fu_223_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_223_p10 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component Sobel_mul_32ns_32ns_64_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component Sobel_Loop_Border_proc_borderbuf_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component Sobel_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    borderbuf_V_U : component Sobel_Loop_Border_proc_borderbuf_V
    generic map (
        DataWidth => 8,
        AddressRange => 1918,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => borderbuf_V_address0,
        ce0 => borderbuf_V_ce0,
        we0 => borderbuf_V_we0,
        d0 => vconv_dout,
        address1 => borderbuf_V_address1,
        ce1 => borderbuf_V_ce1,
        q1 => borderbuf_V_q1);

    mul_32ns_32ns_64_2_1_U38 : component Sobel_mul_32ns_32ns_64_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_223_p0,
        din1 => grp_fu_223_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_223_p2);

    regslice_both_out_data_V_data_V_U : component Sobel_regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => out_data_TDATA_int_regslice,
        vld_in => out_data_TVALID_int_regslice,
        ack_in => out_data_TREADY_int_regslice,
        data_out => out_data_TDATA,
        vld_out => regslice_both_out_data_V_data_V_U_vld_out,
        ack_out => out_data_TREADY,
        apdone_blk => regslice_both_out_data_V_data_V_U_apdone_blk);

    regslice_both_out_data_V_keep_V_U : component Sobel_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => ap_const_lv1_1,
        vld_in => out_data_TVALID_int_regslice,
        ack_in => regslice_both_out_data_V_keep_V_U_ack_in_dummy,
        data_out => out_data_TKEEP,
        vld_out => regslice_both_out_data_V_keep_V_U_vld_out,
        ack_out => out_data_TREADY,
        apdone_blk => regslice_both_out_data_V_keep_V_U_apdone_blk);

    regslice_both_out_data_V_strb_V_U : component Sobel_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => ap_const_lv1_1,
        vld_in => out_data_TVALID_int_regslice,
        ack_in => regslice_both_out_data_V_strb_V_U_ack_in_dummy,
        data_out => out_data_TSTRB,
        vld_out => regslice_both_out_data_V_strb_V_U_vld_out,
        ack_out => out_data_TREADY,
        apdone_blk => regslice_both_out_data_V_strb_V_U_apdone_blk);

    regslice_both_out_data_V_user_V_U : component Sobel_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => ap_const_lv1_0,
        vld_in => out_data_TVALID_int_regslice,
        ack_in => regslice_both_out_data_V_user_V_U_ack_in_dummy,
        data_out => out_data_TUSER,
        vld_out => regslice_both_out_data_V_user_V_U_vld_out,
        ack_out => out_data_TREADY,
        apdone_blk => regslice_both_out_data_V_user_V_U_apdone_blk);

    regslice_both_out_data_V_last_V_U : component Sobel_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => output_last_V_reg_664_pp0_iter2_reg,
        vld_in => out_data_TVALID_int_regslice,
        ack_in => regslice_both_out_data_V_last_V_U_ack_in_dummy,
        data_out => out_data_TLAST,
        vld_out => regslice_both_out_data_V_last_V_U_vld_out,
        ack_out => out_data_TREADY,
        apdone_blk => regslice_both_out_data_V_last_V_U_apdone_blk);

    regslice_both_out_data_V_id_V_U : component Sobel_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => ap_const_lv1_0,
        vld_in => out_data_TVALID_int_regslice,
        ack_in => regslice_both_out_data_V_id_V_U_ack_in_dummy,
        data_out => out_data_TID,
        vld_out => regslice_both_out_data_V_id_V_U_vld_out,
        ack_out => out_data_TREADY,
        apdone_blk => regslice_both_out_data_V_id_V_U_apdone_blk);

    regslice_both_out_data_V_dest_V_U : component Sobel_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => ap_const_lv1_0,
        vld_in => out_data_TVALID_int_regslice,
        ack_in => regslice_both_out_data_V_dest_V_U_ack_in_dummy,
        data_out => out_data_TDEST,
        vld_out => regslice_both_out_data_V_dest_V_U_vld_out,
        ack_out => out_data_TREADY,
        apdone_blk => regslice_both_out_data_V_dest_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((regslice_both_out_data_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state4);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_195_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln76_fu_301_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                i_reg_195 <= select_ln76_3_fu_389_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_reg_195 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_184_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln76_fu_301_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                indvar_flatten_reg_184 <= add_ln76_fu_247_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                indvar_flatten_reg_184 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    j_reg_206_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln76_fu_301_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                j_reg_206 <= add_ln75_fu_431_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                j_reg_206 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                bound_reg_615 <= grp_fu_223_p2;
                sext_ln74_reg_609 <= sext_ln74_fu_244_p1;
                sub72_i_i_i_reg_604 <= sub72_i_i_i_fu_239_p2;
                sub75_i_i_i_reg_599 <= sub75_i_i_i_fu_234_p2;
                sub85_i_i_i_reg_591 <= sub85_i_i_i_fu_229_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                h_read_reg_562 <= h_dout;
                vconv_xlim_loc_read_reg_576 <= vconv_xlim_loc_dout;
                w_read_reg_568 <= w_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln76_reg_625 <= icmp_ln76_fu_301_p2;
                icmp_ln76_reg_625_pp0_iter1_reg <= icmp_ln76_reg_625;
                icmp_ln87_reg_654_pp0_iter1_reg <= icmp_ln87_reg_654;
                icmp_ln92_reg_659_pp0_iter1_reg <= icmp_ln92_reg_659;
                output_last_V_reg_664_pp0_iter1_reg <= output_last_V_reg_664;
                select_ln76_2_reg_636_pp0_iter1_reg <= select_ln76_2_reg_636;
                select_ln76_reg_629_pp0_iter1_reg <= select_ln76_reg_629;
                trunc_ln75_reg_645_pp0_iter1_reg <= trunc_ln75_reg_645;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln76_reg_625_pp0_iter2_reg <= icmp_ln76_reg_625_pp0_iter1_reg;
                icmp_ln76_reg_625_pp0_iter3_reg <= icmp_ln76_reg_625_pp0_iter2_reg;
                icmp_ln92_reg_659_pp0_iter2_reg <= icmp_ln92_reg_659_pp0_iter1_reg;
                output_last_V_reg_664_pp0_iter2_reg <= output_last_V_reg_664_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (select_ln76_2_fu_381_p3 = ap_const_lv1_1) and (icmp_ln76_fu_301_p2 = ap_const_lv1_0))) then
                icmp_ln81_reg_650 <= icmp_ln81_fu_405_p2;
                icmp_ln87_reg_654 <= icmp_ln87_fu_410_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln76_reg_625_pp0_iter1_reg = ap_const_lv1_0))) then
                icmp_ln90_reg_674 <= icmp_ln90_fu_494_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln76_fu_301_p2 = ap_const_lv1_0))) then
                icmp_ln92_reg_659 <= icmp_ln92_fu_415_p2;
                output_last_V_reg_664 <= output_last_V_fu_425_p2;
                select_ln76_2_reg_636 <= select_ln76_2_fu_381_p3;
                select_ln76_reg_629 <= select_ln76_fu_321_p3;
                trunc_ln75_reg_645 <= trunc_ln75_fu_401_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (select_ln76_2_reg_636_pp0_iter1_reg = ap_const_lv1_1))) then
                l_edge_pix_fu_98 <= l_edge_pix_1_fu_460_p3;
                r_edge_pix_fu_94 <= select_ln87_fu_468_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln81_reg_650 = ap_const_lv1_1) and (select_ln76_2_reg_636 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                pix_in_fu_90 <= vconv_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, h_empty_n, w_empty_n, vconv_xlim_loc_empty_n, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, icmp_ln76_fu_301_p2, ap_block_pp0_stage0_subdone, ap_CS_fsm_state9, regslice_both_out_data_V_data_V_U_apdone_blk)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((vconv_xlim_loc_empty_n = ap_const_logic_0) or (w_empty_n = ap_const_logic_0) or (h_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln76_fu_301_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln76_fu_301_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state9 => 
                if (((regslice_both_out_data_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    add_ln74_fu_306_p2 <= std_logic_vector(unsigned(i_reg_195) + unsigned(ap_const_lv11_1));
    add_ln75_fu_431_p2 <= std_logic_vector(unsigned(select_ln76_fu_321_p3) + unsigned(ap_const_lv32_1));
    add_ln76_fu_247_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_184) + unsigned(ap_const_lv64_1));
    add_ln95_fu_500_p2 <= std_logic_vector(unsigned(trunc_ln75_reg_645_pp0_iter1_reg) + unsigned(ap_const_lv11_7FF));
    and_ln92_fu_521_p2 <= (xor_ln90_fu_516_p2 and icmp_ln92_reg_659_pp0_iter2_reg);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state9 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(vconv_empty_n, ap_enable_reg_pp0_iter3, icmp_ln76_reg_625_pp0_iter2_reg, ap_enable_reg_pp0_iter4, icmp_ln76_reg_625_pp0_iter3_reg, ap_enable_reg_pp0_iter1, ap_predicate_op81_read_state5, out_data_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (vconv_empty_n = ap_const_logic_0) and (ap_predicate_op81_read_state5 = ap_const_boolean_1)) or ((icmp_ln76_reg_625_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (out_data_TREADY_int_regslice = ap_const_logic_0)) or ((icmp_ln76_reg_625_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (out_data_TREADY_int_regslice = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(vconv_empty_n, ap_enable_reg_pp0_iter3, icmp_ln76_reg_625_pp0_iter2_reg, ap_enable_reg_pp0_iter4, icmp_ln76_reg_625_pp0_iter3_reg, ap_enable_reg_pp0_iter1, ap_predicate_op81_read_state5, ap_block_state7_io, ap_block_state8_io, out_data_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (vconv_empty_n = ap_const_logic_0) and (ap_predicate_op81_read_state5 = ap_const_boolean_1)) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state8_io) or ((icmp_ln76_reg_625_pp0_iter3_reg = ap_const_lv1_0) and (out_data_TREADY_int_regslice = ap_const_logic_0)))) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state7_io) or ((icmp_ln76_reg_625_pp0_iter2_reg = ap_const_lv1_0) and (out_data_TREADY_int_regslice = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(vconv_empty_n, ap_enable_reg_pp0_iter3, icmp_ln76_reg_625_pp0_iter2_reg, ap_enable_reg_pp0_iter4, icmp_ln76_reg_625_pp0_iter3_reg, ap_enable_reg_pp0_iter1, ap_predicate_op81_read_state5, ap_block_state7_io, ap_block_state8_io, out_data_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (vconv_empty_n = ap_const_logic_0) and (ap_predicate_op81_read_state5 = ap_const_boolean_1)) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state8_io) or ((icmp_ln76_reg_625_pp0_iter3_reg = ap_const_lv1_0) and (out_data_TREADY_int_regslice = ap_const_logic_0)))) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state7_io) or ((icmp_ln76_reg_625_pp0_iter2_reg = ap_const_lv1_0) and (out_data_TREADY_int_regslice = ap_const_logic_0)))));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, h_empty_n, w_empty_n, vconv_xlim_loc_empty_n)
    begin
                ap_block_state1 <= ((vconv_xlim_loc_empty_n = ap_const_logic_0) or (w_empty_n = ap_const_logic_0) or (h_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;

        ap_block_state4_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_pp0_stage0_iter1_assign_proc : process(vconv_empty_n, ap_predicate_op81_read_state5)
    begin
                ap_block_state5_pp0_stage0_iter1 <= ((vconv_empty_n = ap_const_logic_0) and (ap_predicate_op81_read_state5 = ap_const_boolean_1));
    end process;

        ap_block_state6_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state7_io_assign_proc : process(icmp_ln76_reg_625_pp0_iter2_reg, out_data_TREADY_int_regslice)
    begin
                ap_block_state7_io <= ((icmp_ln76_reg_625_pp0_iter2_reg = ap_const_lv1_0) and (out_data_TREADY_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state7_pp0_stage0_iter3_assign_proc : process(icmp_ln76_reg_625_pp0_iter2_reg, out_data_TREADY_int_regslice)
    begin
                ap_block_state7_pp0_stage0_iter3 <= ((icmp_ln76_reg_625_pp0_iter2_reg = ap_const_lv1_0) and (out_data_TREADY_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state8_io_assign_proc : process(icmp_ln76_reg_625_pp0_iter3_reg, out_data_TREADY_int_regslice)
    begin
                ap_block_state8_io <= ((icmp_ln76_reg_625_pp0_iter3_reg = ap_const_lv1_0) and (out_data_TREADY_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state8_pp0_stage0_iter4_assign_proc : process(icmp_ln76_reg_625_pp0_iter3_reg, out_data_TREADY_int_regslice)
    begin
                ap_block_state8_pp0_stage0_iter4 <= ((icmp_ln76_reg_625_pp0_iter3_reg = ap_const_lv1_0) and (out_data_TREADY_int_regslice = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state4_assign_proc : process(icmp_ln76_fu_301_p2)
    begin
        if ((icmp_ln76_fu_301_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state9, regslice_both_out_data_V_data_V_U_apdone_blk)
    begin
        if (((regslice_both_out_data_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op81_read_state5_assign_proc : process(select_ln76_2_reg_636, icmp_ln81_reg_650)
    begin
                ap_predicate_op81_read_state5 <= ((icmp_ln81_reg_650 = ap_const_lv1_1) and (select_ln76_2_reg_636 = ap_const_lv1_1));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state9, regslice_both_out_data_V_data_V_U_apdone_blk)
    begin
        if (((regslice_both_out_data_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    borderbuf_V_address0 <= zext_ln75_1_fu_437_p1(11 - 1 downto 0);
    borderbuf_V_address1 <= zext_ln95_fu_505_p1(11 - 1 downto 0);

    borderbuf_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            borderbuf_V_ce0 <= ap_const_logic_1;
        else 
            borderbuf_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    borderbuf_V_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            borderbuf_V_ce1 <= ap_const_logic_1;
        else 
            borderbuf_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    borderbuf_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, select_ln76_2_reg_636, icmp_ln81_reg_650, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln81_reg_650 = ap_const_lv1_1) and (select_ln76_2_reg_636 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            borderbuf_V_we0 <= ap_const_logic_1;
        else 
            borderbuf_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    brmerge237_i_i_fu_295_p2 <= (cmp63_i_i_i_fu_257_p2 or brmerge_not_i_i_fu_289_p2);
    brmerge237_i_i_mid1_fu_375_p2 <= (cmp63_i_i_i_mid1_fu_329_p2 or brmerge_not_i_i_mid1_fu_369_p2);
    brmerge_not_i_i_fu_289_p2 <= (notrhs_i_i_fu_284_p2 and icmp20_fu_278_p2);
    brmerge_not_i_i_mid1_fu_369_p2 <= (notrhs_i_i_mid1_fu_364_p2 and icmp_fu_358_p2);
    cmp63_i_i_i_fu_257_p2 <= "1" when (i_reg_195 = ap_const_lv11_0) else "0";
    cmp63_i_i_i_mid1_fu_329_p2 <= "1" when (add_ln74_fu_306_p2 = ap_const_lv11_0) else "0";
    cmp86_i_i_i_fu_263_p2 <= "1" when (zext_ln76_1_fu_253_p1 = sub85_i_i_i_reg_591) else "0";
    cmp86_i_i_i_mid1_fu_335_p2 <= "1" when (zext_ln76_fu_312_p1 = sub85_i_i_i_reg_591) else "0";
    grp_fu_223_p0 <= grp_fu_223_p00(32 - 1 downto 0);
    grp_fu_223_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_read_reg_562),64));
    grp_fu_223_p1 <= grp_fu_223_p10(32 - 1 downto 0);
    grp_fu_223_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(w_read_reg_568),64));

    h_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, h_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            h_blk_n <= h_empty_n;
        else 
            h_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    h_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, h_empty_n, w_empty_n, vconv_xlim_loc_empty_n)
    begin
        if ((not(((vconv_xlim_loc_empty_n = ap_const_logic_0) or (w_empty_n = ap_const_logic_0) or (h_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            h_read <= ap_const_logic_1;
        else 
            h_read <= ap_const_logic_0;
        end if; 
    end process;

    icmp20_fu_278_p2 <= "0" when (tmp_fu_268_p4 = ap_const_lv10_0) else "1";
    icmp_fu_358_p2 <= "0" when (tmp_4_fu_348_p4 = ap_const_lv10_0) else "1";
    icmp_ln100_fu_420_p2 <= "1" when (select_ln76_fu_321_p3 = sub75_i_i_i_reg_599) else "0";
    icmp_ln75_fu_316_p2 <= "1" when (j_reg_206 = w_read_reg_568) else "0";
    icmp_ln76_fu_301_p2 <= "1" when (indvar_flatten_reg_184 = bound_reg_615) else "0";
    icmp_ln81_fu_405_p2 <= "1" when (signed(zext_ln75_fu_397_p1) < signed(sext_ln74_reg_609)) else "0";
    icmp_ln85_fu_455_p2 <= "1" when (select_ln76_reg_629_pp0_iter1_reg = ap_const_lv32_0) else "0";
    icmp_ln87_fu_410_p2 <= "1" when (select_ln76_fu_321_p3 = sub72_i_i_i_reg_604) else "0";
    icmp_ln90_fu_494_p2 <= "1" when (tmp_5_fu_485_p4 = ap_const_lv31_0) else "0";
    icmp_ln92_fu_415_p2 <= "1" when (signed(zext_ln75_fu_397_p1) < signed(sext_ln74_reg_609)) else "0";
    l_edge_pix_1_fu_460_p3 <= 
        pix_in_fu_90 when (icmp_ln85_fu_455_p2(0) = '1') else 
        l_edge_pix_fu_98;
    notrhs_i_i_fu_284_p2 <= "1" when (signed(zext_ln76_1_fu_253_p1) < signed(sub85_i_i_i_reg_591)) else "0";
    notrhs_i_i_mid1_fu_364_p2 <= "1" when (signed(zext_ln76_fu_312_p1) < signed(sub85_i_i_i_reg_591)) else "0";

    out_data_TDATA_blk_n_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0, icmp_ln76_reg_625_pp0_iter2_reg, ap_enable_reg_pp0_iter4, icmp_ln76_reg_625_pp0_iter3_reg, out_data_TREADY_int_regslice)
    begin
        if ((((icmp_ln76_reg_625_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((icmp_ln76_reg_625_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)))) then 
            out_data_TDATA_blk_n <= out_data_TREADY_int_regslice;
        else 
            out_data_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_data_TDATA_int_regslice <= 
        l_edge_pix_fu_98 when (icmp_ln90_reg_674(0) = '1') else 
        select_ln92_fu_526_p3;
    out_data_TVALID <= regslice_both_out_data_V_data_V_U_vld_out;

    out_data_TVALID_int_regslice_assign_proc : process(ap_enable_reg_pp0_iter3, icmp_ln76_reg_625_pp0_iter2_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln76_reg_625_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            out_data_TVALID_int_regslice <= ap_const_logic_1;
        else 
            out_data_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    output_last_V_fu_425_p2 <= (select_ln76_1_fu_340_p3 and icmp_ln100_fu_420_p2);
    select_ln76_1_fu_340_p3 <= 
        cmp86_i_i_i_mid1_fu_335_p2 when (icmp_ln75_fu_316_p2(0) = '1') else 
        cmp86_i_i_i_fu_263_p2;
    select_ln76_2_fu_381_p3 <= 
        brmerge237_i_i_mid1_fu_375_p2 when (icmp_ln75_fu_316_p2(0) = '1') else 
        brmerge237_i_i_fu_295_p2;
    select_ln76_3_fu_389_p3 <= 
        add_ln74_fu_306_p2 when (icmp_ln75_fu_316_p2(0) = '1') else 
        i_reg_195;
    select_ln76_fu_321_p3 <= 
        ap_const_lv32_0 when (icmp_ln75_fu_316_p2(0) = '1') else 
        j_reg_206;
    select_ln87_fu_468_p3 <= 
        pix_in_fu_90 when (icmp_ln87_reg_654_pp0_iter1_reg(0) = '1') else 
        r_edge_pix_fu_94;
    select_ln92_fu_526_p3 <= 
        borderbuf_V_q1 when (and_ln92_fu_521_p2(0) = '1') else 
        r_edge_pix_fu_94;
        sext_ln74_fu_244_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(vconv_xlim_loc_read_reg_576),33));

    sub72_i_i_i_fu_239_p2 <= std_logic_vector(unsigned(w_read_reg_568) + unsigned(ap_const_lv32_FFFFFFFD));
    sub75_i_i_i_fu_234_p2 <= std_logic_vector(unsigned(w_read_reg_568) + unsigned(ap_const_lv32_FFFFFFFF));
    sub85_i_i_i_fu_229_p2 <= std_logic_vector(unsigned(h_read_reg_562) + unsigned(ap_const_lv32_FFFFFFFF));
    tmp_4_fu_348_p4 <= add_ln74_fu_306_p2(10 downto 1);
    tmp_5_fu_485_p4 <= select_ln76_reg_629_pp0_iter1_reg(31 downto 1);
    tmp_fu_268_p4 <= i_reg_195(10 downto 1);
    trunc_ln75_fu_401_p1 <= select_ln76_fu_321_p3(11 - 1 downto 0);

    vconv_blk_n_assign_proc : process(vconv_empty_n, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, select_ln76_2_reg_636, icmp_ln81_reg_650)
    begin
        if (((icmp_ln81_reg_650 = ap_const_lv1_1) and (select_ln76_2_reg_636 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            vconv_blk_n <= vconv_empty_n;
        else 
            vconv_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    vconv_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op81_read_state5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_op81_read_state5 = ap_const_boolean_1))) then 
            vconv_read <= ap_const_logic_1;
        else 
            vconv_read <= ap_const_logic_0;
        end if; 
    end process;


    vconv_xlim_loc_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, vconv_xlim_loc_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            vconv_xlim_loc_blk_n <= vconv_xlim_loc_empty_n;
        else 
            vconv_xlim_loc_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    vconv_xlim_loc_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, h_empty_n, w_empty_n, vconv_xlim_loc_empty_n)
    begin
        if ((not(((vconv_xlim_loc_empty_n = ap_const_logic_0) or (w_empty_n = ap_const_logic_0) or (h_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            vconv_xlim_loc_read <= ap_const_logic_1;
        else 
            vconv_xlim_loc_read <= ap_const_logic_0;
        end if; 
    end process;


    w_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, w_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            w_blk_n <= w_empty_n;
        else 
            w_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    w_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, h_empty_n, w_empty_n, vconv_xlim_loc_empty_n)
    begin
        if ((not(((vconv_xlim_loc_empty_n = ap_const_logic_0) or (w_empty_n = ap_const_logic_0) or (h_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            w_read <= ap_const_logic_1;
        else 
            w_read <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln90_fu_516_p2 <= (icmp_ln90_reg_674 xor ap_const_lv1_1);
    zext_ln75_1_fu_437_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln76_reg_629),64));
    zext_ln75_fu_397_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln76_fu_321_p3),33));
    zext_ln76_1_fu_253_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_195),32));
    zext_ln76_fu_312_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln74_fu_306_p2),32));
    zext_ln95_fu_505_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln95_fu_500_p2),64));
end behav;
